# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from sklearn.metrics import r2_score
from functools import partial
import pandas as pd
import numpy as np
from scipy import optimize
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QDialog
from PyQt5.Qt import *
import matplotlib.pyplot as plt
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar

# 设置 plot 显示中文
plt.rcParams['font.sans-serif'] = 'Songti Sc'
plt.rcParams['axes.unicode_minus'] = False
# plt.rcParams['font.family'] = ['sans-serif']
# plt.rcParams['font.sans-serif'] = ['SimHei']
# plt.rcParams['font.sans-serif'] = ['Microsoft YaHei']


class Ui_MainWindow(object):
    def __init__(self):
        self.setupUi(QMainWindow())

        self.child_window = Child()

        self.or_display_image = figure_original()
        self.or_gridlayout = None
        self.op_display_image = figure_original()
        self.op_gridlayout = None

        self.data = None
        self.new_df = None
        self.display_dict = {
            '散点图': 'scatter',
            '折线图': 'line'
        }


        # 保存拟合已选数据
        self.fitting_had_select_data = None
        self.fitting_had_df1 = None
        self.fitting_had_df2 = None
        self.fitting_name = None
        self.clear_name = None

        # 偏差计算， 保存已选操作项内容
        self.three_had_selected_option = list()
        self.three_display_type = None

        # 子窗口中 df 数据源
        self.child_df = None

        # 统计分析-时间范围选择字典
        self.analysis_date_dict = {
            '时': 'H',
            '天': 'D',
            '周': '7D',
            '月': 'M',
        }

        self.curve_display_name = None

        self.curve_display_dict = {
            '折线图':1,
            '散点图':2
        }


    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1300, 850)
        font = QtGui.QFont()
        font.setUnderline(False)
        MainWindow.setFont(font)
        MainWindow.setCursor(QtGui.QCursor(QtCore.Qt.ForbiddenCursor))
        MainWindow.setLayoutDirection(QtCore.Qt.LeftToRight)
        MainWindow.setIconSize(QtCore.QSize(32, 32))
        self.centralWidget = QtWidgets.QWidget(MainWindow)
        self.centralWidget.setObjectName("centralWidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralWidget)
        self.groupBox.setGeometry(QtCore.QRect(5, 0, 240, 380))
        self.groupBox.setObjectName("groupBox")
        self.start_date = QtWidgets.QLabel(self.groupBox)
        self.start_date.setGeometry(QtCore.QRect(10, 40, 70, 25))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.start_date.setFont(font)
        self.start_date.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.start_date.setAlignment(QtCore.Qt.AlignCenter)
        self.start_date.setObjectName("start_date")
        self.end_date = QtWidgets.QLabel(self.groupBox)
        self.end_date.setGeometry(QtCore.QRect(10, 80, 70, 25))
        self.end_date.setFont(font)
        self.end_date.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.end_date.setAlignment(QtCore.Qt.AlignCenter)
        self.end_date.setObjectName("end_date")
        self.device = QtWidgets.QLabel(self.groupBox)
        self.device.setGeometry(QtCore.QRect(10, 120, 70, 25))
        self.device.setFont(font)
        self.device.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.device.setAlignment(QtCore.Qt.AlignCenter)
        self.device.setObjectName("device")
        self.station = QtWidgets.QLabel(self.groupBox)
        self.station.setGeometry(QtCore.QRect(10, 160, 70, 25))
        self.station.setFont(font)
        self.station.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.station.setAlignment(QtCore.Qt.AlignCenter)
        self.station.setObjectName("station")
        self.data_item = QtWidgets.QLabel(self.groupBox)
        self.data_item.setGeometry(QtCore.QRect(10, 200, 70, 25))
        self.data_item.setFont(font)
        self.data_item.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.data_item.setAlignment(QtCore.Qt.AlignCenter)
        self.data_item.setObjectName("data_item")
        self.show_style = QtWidgets.QLabel(self.groupBox)
        self.show_style.setGeometry(QtCore.QRect(10, 240, 70, 25))
        self.show_style.setFont(font)
        self.show_style.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.show_style.setAlignment(QtCore.Qt.AlignCenter)
        self.show_style.setObjectName("show_style")
        self.sure_button = QtWidgets.QPushButton(self.groupBox)
        self.sure_button.setGeometry(QtCore.QRect(10, 310, 70, 40))
        self.sure_button.clicked.connect(self.select_data_ok)
        self.sure_button.setFont(font)
        self.sure_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.sure_button.setObjectName("sure_button")
        self.reset_button = QtWidgets.QPushButton(self.groupBox)
        self.reset_button.setGeometry(QtCore.QRect(130, 310, 80, 40))
        self.reset_button.setFont(font)
        self.reset_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.reset_button.setObjectName("reset_button")
        self.start_data_list = QtWidgets.QComboBox(self.groupBox)
        self.start_data_list.setGeometry(QtCore.QRect(70, 41, 165, 30))
        self.start_data_list.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.start_data_list.setObjectName("start_data_list")
        self.start_data_list.setFont(font)
        self.end_data_list = QtWidgets.QComboBox(self.groupBox)
        self.end_data_list.setGeometry(QtCore.QRect(70, 81, 165, 30))
        self.end_data_list.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.end_data_list.setObjectName("end_data_list")
        self.end_data_list.setFont(font)
        self.device_list = QtWidgets.QComboBox(self.groupBox)
        self.device_list.setGeometry(QtCore.QRect(70, 121, 165, 30))
        self.device_list.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.device_list.setObjectName("device_list")
        self.device_list.setFont(font)
        self.station_list = QtWidgets.QComboBox(self.groupBox)
        self.station_list.setGeometry(QtCore.QRect(70, 161, 165, 30))
        self.station_list.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.station_list.setObjectName("station_list")
        self.station_list.setFont(font)
        self.data_item_list = QtWidgets.QComboBox(self.groupBox)
        self.data_item_list.setGeometry(QtCore.QRect(70, 201, 165, 30))
        self.data_item_list.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.data_item_list.setObjectName("data_item_list")
        self.data_item_list.setFont(font)
        self.show_style_list = QtWidgets.QComboBox(self.groupBox)
        self.show_style_list.setGeometry(QtCore.QRect(70, 241, 165, 30))
        self.show_style_list.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.show_style_list.setObjectName("show_style_list")
        self.show_style_list.setFont(font)
        self.or_display = QtWidgets.QGroupBox(self.centralWidget)
        self.or_display.setGeometry(QtCore.QRect(250, 0, 785, 380))
        self.or_display.setAutoFillBackground(True)
        self.or_display.setFlat(False)
        self.or_display.setCheckable(False)
        self.or_display.setObjectName("or_display")
        self.origin_data_desc = QtWidgets.QGroupBox(self.centralWidget)
        self.origin_data_desc.setGeometry(QtCore.QRect(1040, 0, 255, 380))
        self.origin_data_desc.setFont(font)
        self.origin_data_desc.setObjectName("origin_data_desc")
        self.origin_data_desc_table = QtWidgets.QTableWidget(self.origin_data_desc)
        self.origin_data_desc_table.setGeometry(QtCore.QRect(0, 20, 255, 380))
        self.origin_data_desc_table.setObjectName("original_data_desc_table")
        self.origin_data_desc_table.setColumnCount(0)
        self.origin_data_desc_table.setRowCount(0)
        self.op_display = QtWidgets.QGroupBox(self.centralWidget)
        self.op_display.setGeometry(QtCore.QRect(5, 380, 1030, 460))
        self.op_display.setFont(font)
        self.op_display.setObjectName("op_display")
        self.operate_data_desc = QtWidgets.QGroupBox(self.centralWidget)
        self.operate_data_desc.setGeometry(QtCore.QRect(1040, 380, 250, 460))
        self.operate_data_desc.setFont(font)
        self.operate_data_desc.setObjectName("operate_data_desc")
        self.operate_data_desc_table = QtWidgets.QTableWidget(self.operate_data_desc)
        self.operate_data_desc_table.setGeometry(QtCore.QRect(0, 20, 250, 440))
        self.operate_data_desc_table.setObjectName("original_data_desc_table")
        self.operate_data_desc_table.setColumnCount(0)
        self.operate_data_desc_table.setRowCount(0)

        MainWindow.setCentralWidget(self.centralWidget)
        self.menuBar = QtWidgets.QMenuBar(MainWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 1200, 24))
        self.menuBar.setObjectName("menuBar")
        self.file = QtWidgets.QMenu(self.menuBar)
        self.file.setObjectName("file")
        self.data_cleansing = QtWidgets.QMenu(self.menuBar)
        self.data_cleansing.setObjectName("data_cleansing")
        self.data_calculation = QtWidgets.QMenu(self.menuBar)
        self.data_calculation.setObjectName("data_calculation")
        MainWindow.setMenuBar(self.menuBar)
        self.upload_file = QtWidgets.QAction(MainWindow)
        self.upload_file.setObjectName("upload_file")
        self.download_file = QtWidgets.QAction(MainWindow)
        self.download_file.setObjectName("download_file")
        self.gradient = QtWidgets.QAction(MainWindow)
        self.gradient.setObjectName("gradient")
        self.data_fitting = QtWidgets.QAction(MainWindow)
        self.data_fitting.setObjectName("data_fitting")
        self.three_phase_current = QtWidgets.QAction(MainWindow)
        self.three_phase_current.setObjectName("three_phase_current")
        self.sigma = QtWidgets.QAction(MainWindow)
        self.sigma.setObjectName("sigma")
        self.box = QtWidgets.QAction(MainWindow)
        self.box.setObjectName("box")
        self.moving_avg = QtWidgets.QAction(MainWindow)
        self.moving_avg.setObjectName("moving_avg")
        self.custom_threshold = QtWidgets.QAction(MainWindow)
        self.custom_threshold.setObjectName("custom_threshold")
        self.analysis = QtWidgets.QAction(MainWindow)
        self.analysis.setObjectName("analysis")
        self.file.addAction(self.upload_file)
        self.file.addSeparator()
        self.file.addAction(self.download_file)
        self.data_cleansing.addAction(self.sigma)
        self.data_cleansing.addSeparator()
        self.data_cleansing.addAction(self.box)
        self.data_cleansing.addSeparator()
        self.data_cleansing.addAction(self.moving_avg)
        self.data_cleansing.addSeparator()
        self.data_cleansing.addAction(self.custom_threshold)
        self.data_cleansing.addSeparator()
        self.data_cleansing.addAction(self.analysis)
        self.data_calculation.addAction(self.gradient)
        self.data_calculation.addSeparator()
        self.data_calculation.addAction(self.data_fitting)
        self.data_calculation.addSeparator()
        self.data_calculation.addAction(self.three_phase_current)
        self.menuBar.addAction(self.file.menuAction())
        self.menuBar.addAction(self.data_cleansing.menuAction())
        self.menuBar.addAction(self.data_calculation.menuAction())



        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        # 菜单按钮关联方法
        self.file.triggered[QtWidgets.QAction].connect(self.menu_bar)
        # 菜单按钮关联方法
        self.data_cleansing.triggered[QtWidgets.QAction].connect(self.menu_bar)
        # 菜单按钮关联方法
        self.data_calculation.triggered[QtWidgets.QAction].connect(self.menu_bar)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.groupBox.setTitle(_translate("MainWindow", "数据选择"))
        self.start_date.setText(_translate("MainWindow", "开始日期"))
        self.end_date.setText(_translate("MainWindow", "结束日期"))
        self.device.setText(_translate("MainWindow", "设备"))
        self.station.setText(_translate("MainWindow", "测点"))
        self.data_item.setText(_translate("MainWindow", "数据项"))
        self.show_style.setText(_translate("MainWindow", "曲线方式"))
        self.sure_button.setText(_translate("MainWindow", "确定"))
        self.reset_button.setText(_translate("MainWindow", "重置"))
        self.or_display.setTitle(_translate("MainWindow", "原数据展示"))
        self.origin_data_desc.setTitle(_translate("MainWindow", "统计描述"))
        self.op_display.setTitle(_translate("MainWindow", "数据操作后结果展示"))
        self.operate_data_desc.setTitle(_translate("MainWindow", "统计描述"))
        self.file.setTitle(_translate("MainWindow", "文件"))
        self.data_cleansing.setTitle(_translate("MainWindow", "数据清洗"))
        self.data_calculation.setTitle(_translate("MainWindow", "数据计算"))
        self.upload_file.setText(_translate("MainWindow", "上传文件"))
        self.download_file.setText(_translate("MainWindow", "导出文件"))
        self.gradient.setText(_translate("MainWindow", "变化率"))
        self.data_fitting.setText(_translate("MainWindow", "数据拟合"))
        self.three_phase_current.setText(_translate("MainWindow", "偏差计算"))
        self.sigma.setText(_translate("MainWindow", "3-sigma"))
        self.box.setText(_translate("MainWindow", "箱形图"))
        self.moving_avg.setText(_translate("MainWindow", "移动平均"))
        self.custom_threshold.setText(_translate("MainWindow", "自定义阈值"))
        self.analysis.setText(_translate("MainWindow", "统计分析"))

    def menu_bar(self, menu):
        """
        菜单方法； 注：该方法是文件生成后添加的，若该文件需重新生成， 则要重新添加该方法
        :param menu:
        :return:
        """
        menu_name = menu.text()

        if menu_name == '上传文件':
            self.upload_file_func()
        elif menu_name == '导出文件':
            pass
        elif menu_name == '3-sigma':
            self.sigma_child_window()
        elif menu_name == '箱形图':
            self.box_child_window()
        elif menu_name == '移动平均':
            self.moving_child_window()
        elif menu_name == '自定义阈值':
            self.custom_child_window()
        elif menu_name == '变化率':
            self.changing_rate_child_window()
        elif menu_name == '数据拟合':
            self.fitting_child_window()
        elif menu_name == '偏差计算':
            self.threePhase_child_window()
        elif menu_name == '统计分析':
            self.analysis_child_window()

    def upload_file_func(self):
        """
        上传数据文件
        :return:
        """
        directory = QFileDialog.getOpenFileName(None, "选择文件", '')
        self.file_path = directory[0]
        if len(self.file_path) == 0:
            return

        # 判断文件类型
        if 'csv' in self.file_path:
            self.data = pd.read_csv(self.file_path, header=0)
        elif 'xlsx' in self.file_path:
            self.data = pd.read_excel(self.file_path, header=0)


        date_list = self.data['日期']
        device_list = self.data['设备名称']
        station_list = self.data['测点名称']
        data_items_list = self.data['监控项名称']
        data_items_values = self.data['监控项的值']

        # 重组数据， 将设备名称、测点名称、监控项名称 -> zip
        self.select_df = list(set((zip(device_list, station_list, data_items_list))))

        date = list(set(self.data['日期']))
        date = [x[0:10] for x in date]
        self.date_list = list(set(date))
        self.date_list.sort()

        self.start_data_list.clear()
        # 开始日期添加选项
        for date in self.date_list:
            self.start_data_list.addItem(date)
        self.start_data_list.currentIndexChanged.connect(self.date_select_change)
        self.had_selected_start_date = self.start_data_list.currentText()+ ' 00:00:00'

        # 结束日期添加选项
        self.end_data_list.clear()
        for date in self.date_list:
            self.end_data_list.addItem(date)

        self.end_data_list.setCurrentText(self.date_list[-1])
        self.end_data_list.currentIndexChanged.connect(self.select_device)
        self.had_selected_end = self.end_data_list.currentText() + ' 23:59:59'

        self.device_list.clear()
        devices = list(set(self.data['设备名称']))
        for device in devices:
            self.device_list.addItem(device)
        self.device_list.currentIndexChanged.connect(self.select_stations)
        self.had_selected_device = self.device_list.currentText()


        self.station_list.clear()
        select_df = list(filter(lambda x: x[0] == self.had_selected_device, self.select_df))
        stations = list(set([x[1] for x in select_df]))
        for station in stations:
            self.station_list.addItem(station)
        self.had_selected_station = self.station_list.currentText()

        self.data_item_list.clear()
        item_select_df = list(filter(lambda x: x[1] == self.had_selected_station, select_df))
        data_items = list(set([x[2] for x in item_select_df]))
        for item in data_items:
            self.data_item_list.addItem(item)
        self.had_selected_dataItem = self.data_item_list.currentText()
        self.data_item_list.currentIndexChanged.connect(self.change_data_item)


        show_style_list = ['折线图', '散点图']
        for item in show_style_list:
            self.show_style_list.addItem(item)
        display = self.show_style_list.currentText()
        self.display_name = self.display_dict[display]
        self.show_style_list.currentIndexChanged.connect(self.display_change)

    def change_data_item(self):
        self.had_selected_dataItem = self.data_item_list.currentText()

    def display_change(self):
        """
        展示方式选择
        :return:
        """
        display = self.show_style_list.currentText()
        self.display_name = self.display_dict[display]

    def date_select_change(self):
        """
        下拉框选择
        :return:
        """
        self.end_data_list.clear()

        end_date_list = list(filter(lambda x: x > self.had_selected_start_date, self.date_list))
        for date in end_date_list:
            self.end_data_list.addItem(date)
        self.had_selected_start_date = self.start_data_list.currentText() + ' 00:00:00'

    def select_device(self):
        """
        选择设备
        :return:
        """
        self.device_list.clear()
        self.had_selected_end_date = self.end_data_list.currentText() + ' 23:59:59'
        df = self.data[(self.data['日期'] >= self.had_selected_start_date) & (self.data['日期'] <= self.had_selected_end_date)]
        devices_list = list(set(df['设备名称']))
        for device in devices_list:
            self.device_list.addItem(device)

        self.had_selected_device = self.device_list.currentText()
        self.device_list.currentIndexChanged.connect(self.select_stations)

    def select_stations(self):
        """
        选择测点
        :return:
        """
        self.station_list.clear()
        self.had_selected_device = self.device_list.currentText()
        # print('已选设备：%s'% self.had_selected_device)
        new_data = self.data[(self.data['日期'] >= self.had_selected_start_date) & (self.data['日期'] <= self.had_selected_end) & (self.data['设备名称'] == self.had_selected_device)]

        stations_list = list(set(new_data['测点名称']))
        # print('已选设备的所有测点：', stations_list)
        for station in stations_list:
            self.station_list.addItem(station)

        self.station_list.currentIndexChanged.connect(self.select_dataItem)

    def select_dataItem(self):
        """
        选择数据项
        :return:
        """
        self.data_item_list.clear()
        self.had_selected_station = self.station_list.currentText()
        new_data = self.data[(self.data['日期'] >= self.had_selected_start_date) & (self.data['日期'] <= self.had_selected_end) & (self.data['设备名称'] == self.had_selected_device) & (self.data['测点名称'] == self.had_selected_station)]
        dataItem_list = list(set(new_data['监控项名称']))
        for item in dataItem_list:
            self.data_item_list.addItem(item)

    def select_data_ok(self):
        """
        选择数据确认按钮
        :return:
        """
        start_date = self.start_data_list.currentText() + ' 00:00:00'
        end_date = self.end_data_list.currentText() + '23:59:59'
        device = self.device_list.currentText()
        station = self.station_list.currentText()
        data_item = self.data_item_list.currentText()

        self.df = self.data[(self.data['日期'] >= start_date) & (self.data['日期'] <= end_date) & (self.data['设备名称'] == device) & (self.data['测点名称'] == station) & (self.data['监控项名称'] == data_item)]
        date_list = pd.to_datetime(self.df['日期'])
        value_list = self.df['监控项的值']
        new_df = pd.DataFrame(data=value_list.tolist(), index=date_list)
        title = '%s - %s - %s'% (device, station, data_item)
        self.or_display_image.clear()
        if not self.or_gridlayout:
            self.or_gridlayout = QtWidgets.QGridLayout(self.or_display)
        self.or_tooBar = NavigationToolbar(self.or_display_image, self)
        self.or_gridlayout.addWidget(self.or_tooBar, 0, 0)
        self.or_gridlayout.addWidget(self.or_display_image, 1, 0)
        self.or_display_image.showImage_original(new_df, title, self.display_name)
        self.show()

        # 添加描述
        original_data_desc = self.df['监控项的值'].describe()
        labels_key = ['数据个数', '均值', '标准差', '最小值', '最大值', '上四分位数', '下四分位数']
        labels_val = [original_data_desc['count'], original_data_desc['mean'], original_data_desc['std'], original_data_desc['min'], original_data_desc['max'], original_data_desc['75%'], original_data_desc['25%']]
        labels_val = np.round(np.array(labels_val), 2)
        self.origin_data_desc_table.setRowCount(len(labels_val))
        self.origin_data_desc_table.setColumnCount(2)
        self.origin_data_desc_table.setHorizontalHeaderLabels(['名称', '值'])

        for i in range(len(labels_val)):
            self.origin_data_desc_table.setItem(i, 0, QTableWidgetItem(labels_key[i]))
            self.origin_data_desc_table.setItem(i, 1, QTableWidgetItem(str(labels_val[i])))

    def create_filter_data(self):
        """
        获取过滤数据，根据已选条件
        :return:
        """
        # start_date = self.start_data_list.currentText() + ' 00:00:00'
        # end_date = self.end_data_list.currentText() + '23:59:59'
        # device = self.device_list.currentText()
        # station = self.station_list.currentText()
        # data_item = self.data_item_list.currentText()
        # self.df = self.data[
        #     (self.data['日期'] >= start_date) & (self.data['日期'] <= end_date) & (self.data['设备名称'] == device) & (
        #                 self.data['测点名称'] == station) & (self.data['监控项名称'] == data_item)]

    def download_file_func(self):
        """
        下载处理后数据文件
        :return:
        """
        pass


    def sigma_child_window(self):
        """
        3-sigma 弹出子窗口
        :return:
        """
        self.child_window.setWindowTitle('3-sigma')
        self.child_window.setFixedSize(600, 400)
        # 算法描述
        groupBox = QtWidgets.QGroupBox(self.child_window)
        groupBox.setGeometry(QtCore.QRect(15, 10, 570, 90))
        font = QtGui.QFont()
        font.setPointSize(16)
        groupBox.setFont(font)
        groupBox.setObjectName("groupBox")
        groupBox.setTitle("算法描述")
        label = QtWidgets.QLabel(groupBox)
        label.setGeometry(QtCore.QRect(20, 35, 530, 40))
        label.setObjectName("label")
        label.setText("根据数据的波动性判断异常点， 若点的值在（μ-3*σ，μ+3*σ）的范围内，则认为该点为正常点，\n若超出此范围则认为是异常。注意：3-sigma准则适用于数据量较大的情况。")
        font.setPointSize(12)
        label.setFont(font)

        # 算法操作
        groupBox_2 = QtWidgets.QGroupBox(self.child_window)
        groupBox_2.setGeometry(QtCore.QRect(15, 120, 570, 80))
        font.setPointSize(16)
        groupBox_2.setFont(font)
        groupBox_2.setObjectName("groupBox_2")
        groupBox_2.setTitle("操作内容")
        pushButton = QtWidgets.QPushButton(groupBox_2)
        pushButton.setGeometry(QtCore.QRect(20, 35, 130, 40))
        font.setPointSize(14)
        pushButton.setFont(font)
        pushButton.setObjectName("pushButton")
        pushButton.setText("去除异常值")


        # 算法结果
        groupBox_3 = QtWidgets.QGroupBox(self.child_window)
        groupBox_3.setGeometry(QtCore.QRect(15, 220, 570, 100))
        font.setPointSize(16)
        groupBox_3.setFont(font)
        groupBox_3.setObjectName("groupBox_3")
        groupBox_3.setTitle("操作结果")
        label_2 = QtWidgets.QLabel(groupBox_3)
        label_2.setGeometry(QtCore.QRect(20, 50, 35, 30))
        font.setPointSize(14)
        label_2.setFont(font)
        label_2.setObjectName("label_2")
        label_2.setText("均值:")
        lineEdit = QtWidgets.QLineEdit(groupBox_3)
        lineEdit.setGeometry(QtCore.QRect(60, 50, 60, 30))
        font.setPointSize(13)
        lineEdit.setFont(font)
        lineEdit.setText("")
        lineEdit.setReadOnly(True)
        lineEdit.setObjectName("lineEdit")
        label_3 = QtWidgets.QLabel(groupBox_3)
        label_3.setGeometry(QtCore.QRect(150, 50, 50, 30))
        font.setPointSize(14)
        label_3.setFont(font)
        label_3.setObjectName("label_3")
        label_3.setText("标准差:")
        lineEdit_2 = QtWidgets.QLineEdit(groupBox_3)
        lineEdit_2.setGeometry(QtCore.QRect(205, 50, 60, 30))
        font.setPointSize(13)
        lineEdit_2.setFont(font)
        lineEdit_2.setText("")
        lineEdit_2.setReadOnly(True)
        lineEdit_2.setObjectName("lineEdit_2")
        label_4 = QtWidgets.QLabel(groupBox_3)
        label_4.setGeometry(QtCore.QRect(295, 50, 50, 30))
        font.setPointSize(14)
        label_4.setFont(font)
        label_4.setObjectName("label_4")
        label_4.setText("上限值:")
        lineEdit_3 = QtWidgets.QLineEdit(groupBox_3)
        lineEdit_3.setGeometry(QtCore.QRect(345, 50, 60, 30))
        font.setPointSize(13)
        lineEdit_3.setFont(font)
        lineEdit_3.setText("")
        lineEdit_3.setReadOnly(True)
        lineEdit_3.setObjectName("lineEdit_3")
        label_5 = QtWidgets.QLabel(groupBox_3)
        label_5.setGeometry(QtCore.QRect(430, 50, 50, 30))
        font.setPointSize(14)
        label_5.setFont(font)
        label_5.setObjectName("label_5")
        label_5.setText("下限值:")
        lineEdit_4 = QtWidgets.QLineEdit(groupBox_3)
        lineEdit_4.setGeometry(QtCore.QRect(480, 50, 60, 30))
        font = QtGui.QFont()
        font.setPointSize(13)
        lineEdit_4.setFont(font)
        lineEdit_4.setText("")
        lineEdit_4.setReadOnly(True)
        lineEdit_4.setObjectName("lineEdit_4")

        pushButton.clicked.connect(partial(self.sigma_func, lineEdit, lineEdit_2, lineEdit_3, lineEdit_4))

        # 窗口确认、取消
        pushButton_2 = QtWidgets.QPushButton(self.child_window)
        pushButton_2.setGeometry(QtCore.QRect(150, 335, 120, 50))
        font.setPointSize(16)
        pushButton_2.setFont(font)
        pushButton_2.setObjectName("pushButton_2")
        pushButton_2.setText("取消")
        pushButton_2.clicked.connect(self.close_child_window)
        pushButton_3 = QtWidgets.QPushButton(self.child_window)
        pushButton_3.setGeometry(QtCore.QRect(330, 335, 120, 50))
        pushButton_3.setFont(font)
        pushButton_3.setObjectName("pushButton_3")
        pushButton_3.setText("确定")
        pushButton_3.clicked.connect(self.sigma_ok)

        self.child_window.resize(False, False)
        self.child_window.show()

    def sigma_func(self, lineEdit, lineEdit2, lineEdit3, lineEdit4):
        """

        :return:
        """
        values = self.df['监控项的值']
        self.sigma_mean = round((np.mean(values)), 2)
        self.sigma_std = round((np.std(values)), 2)
        self.sigma_up_threshold = round((self.sigma_mean + 3 * self.sigma_std), 2)
        self.sigma_down_threshold = round((self.sigma_mean - 3 * self.sigma_std), 2)
        lineEdit.setText(str(self.sigma_mean))
        lineEdit2.setText(str(self.sigma_std))
        lineEdit3.setText(str(self.sigma_up_threshold))
        lineEdit4.setText(str(self.sigma_down_threshold))

    def sigma_ok(self):
        """
        3-sigma 弹框确定
        :return:
        """
        start_date = self.start_data_list.currentText() + ' 00:00:00'
        end_date = self.end_data_list.currentText() + '23:59:59'
        device = self.device_list.currentText()
        station = self.station_list.currentText()
        data_item = self.data_item_list.currentText()
        self.df = self.data[
            (self.data['日期'] >= start_date) & (self.data['日期'] <= end_date) & (self.data['设备名称'] == device) & (
                    self.data['测点名称'] == station) & (self.data['监控项名称'] == data_item)]
        date_list = pd.to_datetime(self.df['日期'])
        value_list = self.df['监控项的值']
        pre_df = pd.DataFrame(data=value_list.tolist(), index=date_list)

        aft_df = self.df[(self.df['监控项的值'] >= self.sigma_down_threshold) & (self.df['监控项的值'] <= self.sigma_up_threshold)]
        self.new_df = aft_df
        aft_date_list = pd.to_datetime(aft_df['日期'])
        aft_value_list = aft_df['监控项的值']
        aft_df = pd.DataFrame(data=aft_value_list.tolist(), index=aft_date_list)

        title = '%s - %s - %s' % (device, station, data_item)
        self.op_display_image.clear()
        if not self.op_gridlayout:
            self.op_gridlayout = QtWidgets.QGridLayout(self.op_display)
        self.op_tooBar = NavigationToolbar(self.op_display_image, self)
        self.op_gridlayout.addWidget(self.op_tooBar, 0, 0)
        self.op_gridlayout.addWidget(self.op_display_image, 1, 0)
        self.op_display_image.showImage_original_two_abnormal(pre_df, '处理前', aft_df, '处理后', self.sigma_down_threshold, self.sigma_up_threshold, title)
        self.show()

        operate_data_desc = aft_value_list.describe()
        labels_key = ['数据个数', '均值', '标准差', '最小值', '最大值', '下限', '上限']
        labels_val = [operate_data_desc['count'], operate_data_desc['mean'], operate_data_desc['std'], operate_data_desc['min'], operate_data_desc['max'], self.sigma_down_threshold, self.sigma_up_threshold]
        labels_val = np.round(np.array(labels_val), 2)
        self.operate_data_desc_table.setRowCount(7)
        self.operate_data_desc_table.setColumnCount(2)
        self.operate_data_desc_table.setHorizontalHeaderLabels(['名称', '值'])
        for i in range(7):
            self.operate_data_desc_table.setItem(i, 0, QTableWidgetItem(labels_key[i]))
            self.operate_data_desc_table.setItem(i, 1, QTableWidgetItem(str(labels_val[i])))

        self.close_child_window()

    def box_child_window(self):
        """
        箱形图 子窗口
        :return:
        """
        self.child_window.setWindowTitle('箱形图')

        # 算法描述
        groupBox = QtWidgets.QGroupBox(self.child_window)
        groupBox.setGeometry(QtCore.QRect(15, 10, 570, 90))
        font = QtGui.QFont()
        font.setPointSize(16)
        groupBox.setFont(font)
        groupBox.setObjectName("groupBox")
        groupBox.setTitle("算法描述")
        label = QtWidgets.QLabel(groupBox)
        label.setGeometry(QtCore.QRect(20, 35, 530, 40))
        label.setObjectName("label")
        label.setText("用于显示一组数据分散情况的统计方法。将一组数据从大到小排列，并根据上四分位数，中位数，\n下四分位数设定上下限阈值。")
        font.setPointSize(12)
        label.setFont(font)

        # 算法操作
        groupBox_2 = QtWidgets.QGroupBox(self.child_window)
        groupBox_2.setGeometry(QtCore.QRect(15, 120, 570, 80))
        font.setPointSize(16)
        groupBox_2.setFont(font)
        groupBox_2.setObjectName("groupBox_2")
        groupBox_2.setTitle("操作内容")
        pushButton = QtWidgets.QPushButton(groupBox_2)
        pushButton.setGeometry(QtCore.QRect(20, 35, 130, 40))
        font.setPointSize(14)
        pushButton.setFont(font)
        pushButton.setObjectName("pushButton")
        pushButton.setText("去除异常值")

        # 算法结果
        groupBox_3 = QtWidgets.QGroupBox(self.child_window)
        groupBox_3.setGeometry(QtCore.QRect(15, 220, 570, 100))
        font = QtGui.QFont()
        font.setPointSize(16)
        groupBox_3.setFont(font)
        groupBox_3.setObjectName("groupBox_3")
        label_2 = QtWidgets.QLabel(groupBox_3)
        label_2.setGeometry(QtCore.QRect(20, 50, 65, 30))
        font = QtGui.QFont()
        font.setPointSize(14)
        label_2.setFont(font)
        label_2.setObjectName("label_2")
        label_2.setText("上四分位")
        lineEdit = QtWidgets.QLineEdit(groupBox_3)
        lineEdit.setGeometry(QtCore.QRect(85, 50, 60, 30))
        font = QtGui.QFont()
        font.setPointSize(13)
        lineEdit.setFont(font)
        lineEdit.setText("")
        lineEdit.setReadOnly(True)
        lineEdit.setObjectName("lineEdit")
        label_3 = QtWidgets.QLabel(groupBox_3)
        label_3.setGeometry(QtCore.QRect(155, 50, 63, 30))
        font = QtGui.QFont()
        font.setPointSize(14)
        label_3.setFont(font)
        label_3.setObjectName("label_3")
        label_3.setText("下四分位")
        lineEdit_2 = QtWidgets.QLineEdit(groupBox_3)
        lineEdit_2.setGeometry(QtCore.QRect(220, 50, 60, 30))
        font = QtGui.QFont()
        font.setPointSize(13)
        lineEdit_2.setFont(font)
        lineEdit_2.setText("")
        lineEdit_2.setReadOnly(True)
        lineEdit_2.setObjectName("lineEdit_2")
        label_4 = QtWidgets.QLabel(groupBox_3)
        label_4.setGeometry(QtCore.QRect(295, 50, 50, 30))
        font = QtGui.QFont()
        font.setPointSize(14)
        label_4.setFont(font)
        label_4.setObjectName("label_4")
        label_4.setText("上限值")
        lineEdit_3 = QtWidgets.QLineEdit(groupBox_3)
        lineEdit_3.setGeometry(QtCore.QRect(345, 50, 60, 30))
        font = QtGui.QFont()
        font.setPointSize(13)
        lineEdit_3.setFont(font)
        lineEdit_3.setText("")
        lineEdit_3.setReadOnly(True)
        lineEdit_3.setObjectName("lineEdit_3")
        label_5 = QtWidgets.QLabel(groupBox_3)
        label_5.setGeometry(QtCore.QRect(430, 50, 50, 30))
        font = QtGui.QFont()
        font.setPointSize(14)
        label_5.setFont(font)
        label_5.setObjectName("label_5")
        label_5.setText("下限值")
        lineEdit_4 = QtWidgets.QLineEdit(groupBox_3)
        lineEdit_4.setGeometry(QtCore.QRect(480, 50, 60, 30))
        font = QtGui.QFont()
        font.setPointSize(13)
        lineEdit_4.setFont(font)
        lineEdit_4.setText("")
        lineEdit_4.setReadOnly(True)
        lineEdit_4.setObjectName("lineEdit_4")

        pushButton.clicked.connect(partial(self.box_func, lineEdit, lineEdit_2, lineEdit_3, lineEdit_4))

        # 窗口确认、取消
        pushButton_2 = QtWidgets.QPushButton(self.child_window)
        pushButton_2.setGeometry(QtCore.QRect(150, 335, 120, 50))
        font.setPointSize(16)
        pushButton_2.setFont(font)
        pushButton_2.setObjectName("pushButton_2")
        pushButton_2.setText("取消")
        pushButton_2.clicked.connect(self.close_child_window)
        pushButton_3 = QtWidgets.QPushButton(self.child_window)
        pushButton_3.setGeometry(QtCore.QRect(330, 335, 120, 50))
        pushButton_3.setFont(font)
        pushButton_3.setObjectName("pushButton_3")
        pushButton_3.setText("确定")
        pushButton_3.clicked.connect(self.box_ok)

        self.child_window.setFixedSize(600, 400)
        self.child_window.resize(False, False)
        self.child_window.show()


    def box_func(self, lineEdit, lineEdit2, lineEdit3, lineEdit4):
        """
        箱形图计算
        :return:
        """
        values = self.df['监控项的值']
        data_list = sorted(np.array(values))
        Q3 = round(np.quantile(data_list, 0.75), 2)
        Q1 = round(np.quantile(data_list, 0.25), 2)
        self.box_up_threshold = round(Q3 + 1.5 * (Q3 -Q1), 2)
        self.box_down_threshold = round(Q1 - 1.5 * (Q3 -Q1), 2)
        lineEdit.setText(str(Q1))
        lineEdit2.setText(str(Q3))
        lineEdit3.setText(str(self.box_up_threshold))
        lineEdit4.setText(str(self.box_down_threshold))

    def box_ok(self):
        """
        箱形图
        :return:
        """
        title = '%s - %s - %s' % (self.had_selected_device, self.had_selected_station, self.had_selected_dataItem)
        date_list = pd.to_datetime(self.df['日期'])
        value_list = self.df['监控项的值']
        pre_df = pd.DataFrame(data=value_list.tolist(), index=date_list)

        aft_df = self.df[
            (self.df['监控项的值'] >= self.box_down_threshold) & (self.df['监控项的值'] <= self.box_up_threshold)]
        self.new_df = aft_df
        aft_date_list = pd.to_datetime(aft_df['日期'])
        aft_value_list = aft_df['监控项的值']
        aft_df = pd.DataFrame(data=aft_value_list.tolist(), index=aft_date_list)

        self.op_display_image.clear()
        if not self.op_gridlayout:
            self.op_gridlayout = QtWidgets.QGridLayout(self.op_display)
        self.op_tooBar = NavigationToolbar(self.op_display_image, self)
        self.op_gridlayout.addWidget(self.op_tooBar, 0, 0)
        self.op_gridlayout.addWidget(self.op_display_image, 1, 0)
        self.op_display_image.showImage_original_two_abnormal(pre_df, '处理前', aft_df, '处理后', self.box_down_threshold,
                                                              self.box_up_threshold, title)
        self.show()

        operate_data_desc = aft_value_list.describe()
        labels_key = ['数据个数', '均值', '标准差', '最小值', '最大值', '下限', '上限']
        labels_val = [operate_data_desc['count'], operate_data_desc['mean'], operate_data_desc['std'],
                      operate_data_desc['min'], operate_data_desc['max'], self.box_down_threshold,
                      self.box_up_threshold]
        labels_val = np.round(np.array(labels_val), 2)
        self.operate_data_desc_table.setRowCount(7)
        self.operate_data_desc_table.setColumnCount(2)
        self.operate_data_desc_table.setHorizontalHeaderLabels(['名称', '值'])
        for i in range(7):
            self.operate_data_desc_table.setItem(i, 0, QTableWidgetItem(labels_key[i]))
            self.operate_data_desc_table.setItem(i, 1, QTableWidgetItem(str(labels_val[i])))

        self.close_child_window()


    def moving_child_window(self):
        """
        移动平均子窗口
        :return:
        """
        self.child_window.setWindowTitle('移动平均')
        self.child_window.setFixedSize(600, 400)

        # 算法描述
        groupBox = QtWidgets.QGroupBox(self.child_window)
        groupBox.setGeometry(QtCore.QRect(15, 10, 570, 90))
        font = QtGui.QFont()
        font.setPointSize(16)
        groupBox.setFont(font)
        groupBox.setObjectName("groupBox")
        groupBox.setTitle("算法描述")
        label = QtWidgets.QLabel(groupBox)
        label.setGeometry(QtCore.QRect(20, 35, 530, 40))
        label.setObjectName("label")
        label.setText("根据用户输入的时间窗大小K（即数据点的个数为K），依次滑动窗口并获取窗口内的平均值（K\n个点的均值）。")
        font.setPointSize(12)
        label.setFont(font)

        # 算法操作
        groupBox_2 = QtWidgets.QGroupBox(self.child_window)
        groupBox_2.setGeometry(QtCore.QRect(15, 120, 570, 80))
        font = QtGui.QFont()
        font.setPointSize(16)
        groupBox_2.setFont(font)
        groupBox_2.setObjectName("groupBox_2")
        groupBox_2.setTitle("算法操作")
        label_4 = QtWidgets.QLabel(groupBox_2)
        label_4.setGeometry(QtCore.QRect(20, 40, 95, 30))
        font = QtGui.QFont()
        font.setPointSize(14)
        label_4.setFont(font)
        label_4.setObjectName("label_4")
        label_4.setText("输入窗口大小")
        lineEdit_3 = QtWidgets.QLineEdit(groupBox_2)
        lineEdit_3.setGeometry(QtCore.QRect(117, 40, 70, 30))
        font = QtGui.QFont()
        font.setPointSize(13)
        lineEdit_3.setFont(font)
        lineEdit_3.setText("")
        lineEdit_3.setReadOnly(False)
        lineEdit_3.setObjectName("lineEdit_3")

        # 窗口确认、取消
        pushButton_2 = QtWidgets.QPushButton(self.child_window)
        pushButton_2.setGeometry(QtCore.QRect(150, 335, 120, 50))
        font.setPointSize(16)
        pushButton_2.setFont(font)
        pushButton_2.setObjectName("pushButton_2")
        pushButton_2.setText("取消")
        pushButton_2.clicked.connect(self.close_child_window)

        pushButton_3 = QtWidgets.QPushButton(self.child_window)
        pushButton_3.setGeometry(QtCore.QRect(330, 335, 120, 50))
        pushButton_3.setFont(font)
        pushButton_3.setObjectName("pushButton_3")
        pushButton_3.setText("确定")
        pushButton_3.clicked.connect(partial(self.moving_ok, lineEdit_3))

        self.child_window.resize(False, False)
        self.child_window.show()

    def moving_ok(self, lineEdit):
        """
        移动平均计算
        :return:
        """
        value = int(lineEdit.text())
        date_list = pd.to_datetime(self.df['日期'])
        value_list = self.df['监控项的值']
        pre_df = pd.DataFrame(data=value_list.tolist(), index=date_list)

        self.new_df = self.df
        aft_date_list = pd.to_datetime(self.df['日期'])
        aft_value_list = self.df['监控项的值']
        aft_df = pd.Series(data=aft_value_list.tolist(), index=aft_date_list)
        aft_df = aft_df.rolling(value, min_periods=1).mean()

        title = '%s - %s - %s'% (self.had_selected_device, self.had_selected_station, self.had_selected_dataItem)
        self.op_display_image.clear()
        if not self.op_gridlayout:
            self.op_gridlayout = QtWidgets.QGridLayout(self.op_display)
        self.op_tooBar = NavigationToolbar(self.op_display_image, self)
        self.op_gridlayout.addWidget(self.op_tooBar, 0, 0)
        self.op_gridlayout.addWidget(self.op_display_image, 1, 0)
        self.op_display_image.showImage_original_two(pre_df, '处理前', aft_df, '处理后', title)
        self.show()

        operate_data_desc = aft_value_list.describe()
        labels_key = ['数据个数', '均值', '标准差', '最小值', '最大值']
        labels_val = [operate_data_desc['count'], operate_data_desc['mean'], operate_data_desc['std'],
                      operate_data_desc['min'], operate_data_desc['max']]
        labels_val = np.round(np.array(labels_val), 2)
        self.operate_data_desc_table.setRowCount(7)
        self.operate_data_desc_table.setColumnCount(2)
        self.operate_data_desc_table.setHorizontalHeaderLabels(['名称', '值'])
        for i in range(5):
            self.operate_data_desc_table.setItem(i, 0, QTableWidgetItem(labels_key[i]))
            self.operate_data_desc_table.setItem(i, 1, QTableWidgetItem(str(labels_val[i])))

        self.close_child_window()

    def custom_child_window(self):
        """
        自定义阈值子窗口
        :return:
        """
        self.child_window.setWindowTitle('自定义阈值')
        self.child_window.setFixedSize(600, 400)

        # 算法描述
        groupBox = QtWidgets.QGroupBox(self.child_window)
        groupBox.setGeometry(QtCore.QRect(15, 10, 570, 90))
        font = QtGui.QFont()
        font.setPointSize(16)
        groupBox.setFont(font)
        groupBox.setObjectName("groupBox")
        groupBox.setTitle("算法描述")
        label = QtWidgets.QLabel(groupBox)
        label.setGeometry(QtCore.QRect(20, 35, 530, 40))
        label.setObjectName("label")
        label.setText("根据用户自设定下限值a和上限值b，若数据在（a,b）的范围内，则为正常点，若超出此范围则认\n为是异常")
        font.setPointSize(12)
        label.setFont(font)

        # 算法操作
        groupBox_2 = QtWidgets.QGroupBox(self.child_window)
        groupBox_2.setGeometry(QtCore.QRect(15, 120, 570, 80))
        groupBox_2.setTitle("操作内容")
        font = QtGui.QFont()
        font.setPointSize(16)
        groupBox_2.setFont(font)
        groupBox_2.setObjectName("groupBox_2")
        label_4 = QtWidgets.QLabel(groupBox_2)
        label_4.setGeometry(QtCore.QRect(20, 40, 50, 30))
        font = QtGui.QFont()
        font.setPointSize(14)
        label_4.setFont(font)
        label_4.setObjectName("label_4")
        label_4.setText("上限值：")
        lineEdit_3 = QtWidgets.QLineEdit(groupBox_2)
        lineEdit_3.setGeometry(QtCore.QRect(80, 40, 70, 30))
        font = QtGui.QFont()
        font.setPointSize(13)
        lineEdit_3.setFont(font)
        lineEdit_3.setText("")
        lineEdit_3.setReadOnly(False)
        lineEdit_3.setObjectName("lineEdit_3")
        label_5 = QtWidgets.QLabel(groupBox_2)
        label_5.setGeometry(QtCore.QRect(180, 40, 50, 30))
        font = QtGui.QFont()
        font.setPointSize(14)
        label_5.setFont(font)
        label_5.setObjectName("label_5")
        label_5.setText("下限值：")
        lineEdit_4 = QtWidgets.QLineEdit(groupBox_2)
        lineEdit_4.setGeometry(QtCore.QRect(240, 40, 70, 30))
        font.setPointSize(13)
        lineEdit_4.setFont(font)
        lineEdit_4.setText("")
        lineEdit_4.setReadOnly(False)
        lineEdit_4.setObjectName("lineEdit_4")


        # 窗口确认、取消
        pushButton_2 = QtWidgets.QPushButton(self.child_window)
        pushButton_2.setGeometry(QtCore.QRect(150, 335, 120, 50))
        font.setPointSize(16)
        pushButton_2.setFont(font)
        pushButton_2.setObjectName("pushButton_2")
        pushButton_2.setText("取消")
        pushButton_2.clicked.connect(self.close_child_window)

        pushButton_3 = QtWidgets.QPushButton(self.child_window)
        pushButton_3.setGeometry(QtCore.QRect(330, 335, 120, 50))
        pushButton_3.setFont(font)
        pushButton_3.setObjectName("pushButton_3")
        pushButton_3.setText("确定")
        pushButton_3.clicked.connect(partial(self.custom_ok, lineEdit_3, lineEdit_4))

        self.child_window.resize(False, False)
        self.child_window.show()

    def custom_ok(self, up_lineEdit, down_lineEdit):
        """
        自定义阈值
        :return:
        """
        up = float(up_lineEdit.text())
        down = float(down_lineEdit.text())

        date_list = pd.to_datetime(self.df['日期'])
        value_list = self.df['监控项的值']
        pre_df = pd.DataFrame(data=value_list.tolist(), index=date_list)

        aft_df = self.df[
            (self.df['监控项的值'] >= down) & (self.df['监控项的值'] <= up)]
        self.new_df = aft_df
        aft_date_list = pd.to_datetime(aft_df['日期'])
        aft_value_list = aft_df['监控项的值']
        aft_df = pd.DataFrame(data=aft_value_list.tolist(), index=aft_date_list)

        title = '%s - %s - %s' % (self.had_selected_device, self.had_selected_station, self.had_selected_dataItem)
        self.op_display_image.clear()
        if not self.op_gridlayout:
            self.op_gridlayout = QtWidgets.QGridLayout(self.op_display)
        self.op_tooBar = NavigationToolbar(self.op_display_image, self)
        self.op_gridlayout.addWidget(self.op_tooBar, 0, 0)
        self.op_gridlayout.addWidget(self.op_display_image, 1, 0)
        self.op_display_image.showImage_original_two_abnormal(pre_df, '处理前', aft_df, '处理后', up,
                                                              down, title)
        self.show()

        operate_data_desc = aft_value_list.describe()
        labels_key = ['数据个数', '均值', '标准差', '最小值', '最大值', '下限', '上限']
        labels_val = [operate_data_desc['count'], operate_data_desc['mean'], operate_data_desc['std'],
                      operate_data_desc['min'], operate_data_desc['max'], up,
                      down]

        labels_val = np.round(np.array(labels_val), 2)
        self.operate_data_desc_table.setRowCount(7)
        self.operate_data_desc_table.setColumnCount(2)
        self.operate_data_desc_table.setHorizontalHeaderLabels(['名称', '值'])
        for i in range(7):
            self.operate_data_desc_table.setItem(i, 0, QTableWidgetItem(labels_key[i]))
            self.operate_data_desc_table.setItem(i, 1, QTableWidgetItem(str(labels_val[i])))

        self.close_child_window()

    def analysis_child_window(self):
        """
        数据清洗-统计分析
        :return:
        """
        self.child_window.setWindowTitle('统计分析')
        self.child_window.setFixedSize(600, 400)

        # 算法描述
        groupBox = QtWidgets.QGroupBox(self.child_window)
        groupBox.setGeometry(QtCore.QRect(15, 10, 570, 90))
        font = QtGui.QFont()
        font.setPointSize(16)
        groupBox.setFont(font)
        groupBox.setObjectName("groupBox")
        groupBox.setTitle("算法描述")
        label = QtWidgets.QLabel(groupBox)
        label.setGeometry(QtCore.QRect(20, 35, 530, 40))
        label.setObjectName("label")
        label.setText("用于显示一组数据根据时间变化趋势的统计方法。将一组数据根据时、天、周、月，计算该组数据的均值、最大值、最小值。")
        font.setPointSize(12)
        label.setFont(font)

        # 时间范围选择
        date_groupBox = QtWidgets.QGroupBox(self.child_window)
        date_groupBox.setGeometry(QtCore.QRect(15, 120, 570, 60))
        font = QtGui.QFont()
        font.setPointSize(16)
        date_groupBox.setFont(font)
        date_groupBox.setTitle("时间范围选择")

        self.hour_analysis = QtWidgets.QRadioButton(date_groupBox)
        self.hour_analysis.setGeometry(QtCore.QRect(20, 20, 40, 40))
        self.hour_analysis.setText('时')
        self.hour_analysis.setFont(font)
        self.hour_analysis.toggled.connect(partial(self.analysis_selected_date, ))

        self.day_analysis = QtWidgets.QRadioButton(date_groupBox)
        self.day_analysis.setGeometry(QtCore.QRect(80, 20, 40, 40))
        self.day_analysis.setText('天')
        self.day_analysis.setFont(font)
        self.day_analysis.toggled.connect(partial(self.analysis_selected_date, ))
        self.day_analysis.setChecked(True)
        self.analysis_name = self.day_analysis.text()


        self.week_analysis = QtWidgets.QRadioButton(date_groupBox)
        self.week_analysis.setGeometry(QtCore.QRect(140, 20, 40, 40))
        self.week_analysis.setText('周')
        self.week_analysis.setFont(font)
        self.week_analysis.toggled.connect(partial(self.analysis_selected_date, ))

        self.month_analysis = QtWidgets.QRadioButton(date_groupBox)
        self.month_analysis.setGeometry(QtCore.QRect(200, 20, 40, 40))
        self.month_analysis.setText('月')
        self.month_analysis.setFont(font)
        self.month_analysis.toggled.connect(partial(self.analysis_selected_date, ))

        # 曲线展示方式
        self.curve_display_type()

        # 窗口确认、取消
        self.child_window_buttons(self.child_window, self.analysis_ok, X=100, Y=320)

        self.child_window.resize(False, False)
        self.child_window.show()

    def analysis_selected_date(self):
        """
        确定选择时间范围
        :return:
        """
        radioButton = self.sender()
        if radioButton.isChecked():
            self.analysis_name = radioButton.text()


    def analysis_ok(self):
        """

        :return:
        """
        if self.df is None:
            return

        kpi_data = self.df[['日期', '监控项的值']]
        kpi_data['日期'] = pd.to_datetime(kpi_data['日期'])
        analysis_dict = self.get_mean_by_date(kpi_data, self.analysis_date_dict[self.analysis_name])

        self.op_display_image.clear()
        if not self.op_gridlayout:
            self.op_gridlayout = QtWidgets.QGridLayout(self.op_display)
        self.op_tooBar = NavigationToolbar(self.op_display_image, self)
        self.op_gridlayout.addWidget(self.op_tooBar, 0, 0)
        self.op_gridlayout.addWidget(self.op_display_image, 1, 0)
        title= '均值-最大值-最小值( %s )'% self.analysis_name
        display = self.curve_display_dict[self.curve_display_name]
        self.op_display_image.showImage_analysis(analysis_dict['mean'], analysis_dict['max'], analysis_dict['min'], display=display, title=title)

        self.show()

        self.close_child_window()

    def get_mean_by_date(self, data, unit):
        """
        统计分析-根据时间获取均值、Max、Min
        :param data: DataFrame
        :param unit: H, D, 7D, M
        :return:
        """
        statistic_dict = dict()
        statistic_dict['mean'] = data.groupby(pd.Grouper(key='日期', freq=unit)).mean()
        statistic_dict['max'] = data.groupby(pd.Grouper(key='日期', freq=unit)).max()
        statistic_dict['min'] = data.groupby(pd.Grouper(key='日期', freq=unit)).min()
        return statistic_dict

    def fitting_child_window(self):
        """
        数据拟合
        :return:
        """
        self.child_window.setWindowTitle('数据拟合')
        self.child_window.setFixedSize(800, 600)

        # 算法描述
        groupBox = QtWidgets.QGroupBox(self.child_window)
        groupBox.setGeometry(QtCore.QRect(15, 10, 770, 90))
        font = QtGui.QFont()
        font.setPointSize(16)
        groupBox.setFont(font)
        groupBox.setObjectName("groupBox")
        groupBox.setTitle("算法描述")
        label = QtWidgets.QLabel(groupBox)
        label.setGeometry(QtCore.QRect(20, 35, 730, 40))
        label.setObjectName("label")
        label.setText("对两个物理量，通过线性或非线性拟合函数，确认两个物理量之间的关系，并返回拟合函数。")
        font.setPointSize(12)
        label.setFont(font)

        # 数据选择
        groupBox_2 = QtWidgets.QGroupBox(self.child_window)
        groupBox_2.setGeometry(QtCore.QRect(15, 120, 770, 180))
        font = QtGui.QFont()
        font.setPointSize(16)
        groupBox_2.setFont(font)
        groupBox_2.setObjectName("groupBox_2")
        groupBox_2.setTitle("选择数据")

        font.setPointSize(14)
        device_1_name = QtWidgets.QLabel(groupBox_2)
        device_1_name.setGeometry(QtCore.QRect(20, 40, 41, 30))
        device_1_name.setFont(font)
        device_1_name.setObjectName("device_1_name")
        device_1_name.setText("设备")
        station_1_name = QtWidgets.QLabel(groupBox_2)
        station_1_name.setGeometry(QtCore.QRect(20, 81, 35, 35))
        station_1_name.setFont(font)
        station_1_name.setObjectName("station_1_name")
        station_1_name.setText("测点")
        device_1 = QtWidgets.QComboBox(groupBox_2)
        device_1.setGeometry(QtCore.QRect(70, 40, 200, 35))
        device_1.setObjectName("device_1")
        station_1 = QtWidgets.QComboBox(groupBox_2)
        station_1.setGeometry(QtCore.QRect(70, 80, 200, 35))
        station_1.setObjectName("station_1")
        dataItem_name_1 = QtWidgets.QLabel(groupBox_2)
        dataItem_name_1.setGeometry(QtCore.QRect(20, 130, 50, 35))
        dataItem_name_1.setFont(font)
        dataItem_name_1.setObjectName("dataItem_name_1")
        dataItem_name_1.setText("数据项")
        data_item_1 = QtWidgets.QComboBox(groupBox_2)
        data_item_1.setGeometry(QtCore.QRect(70, 132, 200, 32))
        data_item_1.setObjectName("data_item_1")

        font.setPointSize(14)
        device_2_name = QtWidgets.QLabel(groupBox_2)
        device_2_name.setGeometry(QtCore.QRect(400, 40, 41, 30))
        device_2_name.setFont(font)
        device_2_name.setObjectName("device_2_name")
        device_2_name.setText("设备")
        station_2_name = QtWidgets.QLabel(groupBox_2)
        station_2_name.setGeometry(QtCore.QRect(400, 81, 35, 35))
        station_2_name.setFont(font)
        station_2_name.setObjectName("station_2_name")
        station_2_name.setText("测点")
        device_2 = QtWidgets.QComboBox(groupBox_2)
        device_2.setGeometry(QtCore.QRect(450, 40, 200, 35))
        device_2.setObjectName("device_2")
        station_2 = QtWidgets.QComboBox(groupBox_2)
        station_2.setGeometry(QtCore.QRect(450, 80, 200, 35))
        station_2.setObjectName("station_2")
        dataItem_name_2 = QtWidgets.QLabel(groupBox_2)
        dataItem_name_2.setGeometry(QtCore.QRect(400, 130, 50, 35))
        dataItem_name_2.setFont(font)
        dataItem_name_2.setObjectName("dataItem_name_2")
        dataItem_name_2.setText("数据项")
        data_item_2 = QtWidgets.QComboBox(groupBox_2)
        data_item_2.setGeometry(QtCore.QRect(450, 132, 200, 32))
        data_item_2.setObjectName("data_item_2")

        device_1.clear()
        device_2.clear()
        if self.data is not None:
            device_list = list(set(self.data['设备名称']))

            for item in device_list:
                device_1.addItem(item)
                device_2.addItem(item)

            if self.fitting_had_select_data:
                device_1.setCurrentText(self.fitting_had_select_data[0])
                device_2.setCurrentText(self.fitting_had_select_data[3])

            self.child_selected_device_1 = device_1.currentText()
            self.child_selected_device_2 = device_2.currentText()
            device_1.currentIndexChanged.connect(partial(self.child_device_change, device_1, station_1, data_item_1, 1))
            device_2.currentIndexChanged.connect(partial(self.child_device_change, device_2, station_2, data_item_2, 2))

            station_1.clear()
            station_2.clear()
            select_df_1 = list(filter(lambda x: x[0] == self.child_selected_device_1, self.select_df))
            station_1_list = list(set([x[1] for x in select_df_1]))
            for item in station_1_list:
                station_1.addItem(item)

            if self.fitting_had_select_data:
                station_1.setCurrentText(self.fitting_had_select_data[1])

            self.child_selected_station_1 = station_1.currentText()
            station_1.currentIndexChanged.connect(partial(self.child_station_change, device_1, station_1, data_item_1, 1))
            station_2.currentIndexChanged.connect(partial(self.child_station_change, device_2, station_2, data_item_2, 2))

            select_df_2 = list(filter(lambda x: x[0] == self.child_selected_device_2, self.select_df))
            station_2_list = list(set([x[1] for x in select_df_2]))
            for item in station_2_list:
                station_2.addItem(item)
            if self.fitting_had_select_data:
                station_2.setCurrentText(self.fitting_had_select_data[4])

            self.child_selected_station_2 = station_2.currentText()

            data_item_1.clear()
            data_item_2.clear()
            item_df_1 = list(filter(lambda x: x[1] == self.child_selected_station_1, select_df_1))
            item_list_1 = list(set([x[2] for x in item_df_1]))
            for item in item_list_1:
                data_item_1.addItem(item)

            if self.fitting_had_select_data:
                data_item_1.setCurrentText(self.fitting_had_select_data[2])
            self.child_selected_item_1 = data_item_1.currentText()

            item_df_2 = list(filter(lambda x: x[1] == self.child_selected_station_2, select_df_2))
            item_list_2 = list(set([x[2] for x in item_df_2]))
            for item in item_list_2:
                data_item_2.addItem(item)
            if self.fitting_had_select_data:
                data_item_2.setCurrentText(self.fitting_had_select_data[5])
            self.child_selected_item_2 = data_item_2.currentText()

            data_item_1.currentIndexChanged.connect(partial(self.child_item_change, data_item_1, 1))
            data_item_2.currentIndexChanged.connect(partial(self.child_item_change, data_item_2, 2))

        # print('已选设备信息', self.fitting_had_select_data)

        # 数据清洗
        self.child_clean_data(self.child_window, 15, 320)

        # 拟合方式
        groupBox_3 = QtWidgets.QGroupBox(self.child_window)
        groupBox_3.setGeometry(QtCore.QRect(15, 420, 770, 60))
        font = QtGui.QFont()
        font.setPointSize(16)
        groupBox_3.setFont(font)
        groupBox_3.setObjectName("groupBox_3")
        groupBox_3.setTitle("拟合方式")
        fitting_type_1 = QtWidgets.QRadioButton(groupBox_3)
        fitting_type_1.setGeometry(QtCore.QRect(20, 20, 90, 40))
        fitting_type_1.setText('Ax + B')
        fitting_type_1.setFont(font)
        fitting_type_1.toggled.connect(partial(self.child_fitting_button,))

        fitting_type_2 = QtWidgets.QRadioButton(groupBox_3)
        fitting_type_2.setGeometry(QtCore.QRect(120, 20, 130, 40))
        fitting_type_2.setText('Ax^2 + Ax + B')
        fitting_type_2.setFont(font)
        fitting_type_2.toggled.connect(partial(self.child_fitting_button,))

        if self.fitting_name is None or self.fitting_name == 'Ax + B':
            fitting_type_1.setChecked(True)
            self.fitting_name = fitting_type_1.text()
        elif self.fitting_name == 'Ax^2 + Ax + B':
            fitting_type_2.setChecked(True)
            self.fitting_name = fitting_type_2.text()

        # 窗口确认、取消
        font.setPointSize(16)
        cancel = QtWidgets.QPushButton(self.child_window)
        cancel.setGeometry(QtCore.QRect(150, 540, 120, 50))
        cancel.setFont(font)
        cancel.setObjectName("cancel")
        cancel.setText("取消")
        cancel.clicked.connect(self.close_child_window)

        sure_ok = QtWidgets.QPushButton(self.child_window)
        sure_ok.setGeometry(QtCore.QRect(330, 540, 120, 50))
        sure_ok.setFont(font)
        sure_ok.setObjectName("sure_ok")
        sure_ok.setText("确定")

        clean_cache = QtWidgets.QPushButton(self.child_window)
        clean_cache.setGeometry(QtCore.QRect(530, 540, 120, 50))
        clean_cache.setFont(font)
        clean_cache.setObjectName("clean_cache")
        clean_cache.setText("清空")
        clean_cache.clicked.connect(self.clean_fitting_record)

        sure_ok.clicked.connect(partial(self.fitting_ok, ))



        self.child_window.resize(False, False)
        self.child_window.show()

    def child_device_change(self, device, station, dataItem, num=1):
        station.clear()
        dataItem.clear()
        if num ==1:
            self.child_selected_device_1 = device.currentText()

            select_df = list(filter(lambda x: x[0] == self.child_selected_device_1, self.select_df))
            station_list = list(set([x[1] for x in select_df]))
            for item in station_list:
                station.addItem(item)
            self.child_selected_station_1 = station.currentText()

            items_df = list(filter(lambda x: x[1] == self.child_selected_station_1, select_df))
            items_list = list(set([x[2] for x in items_df]))
            for item in items_list:
                dataItem.addItem(item)
            self.child_selected_item_1 = dataItem.currentText()
        else:
            self.child_selected_device_2 = device.currentText()

            select_df = list(filter(lambda x: x[0] == self.child_selected_device_2, self.select_df))
            station_list = list(set([x[1] for x in select_df]))
            for item in station_list:
                station.addItem(item)
            self.child_selected_station_2 = station.currentText()

            items_df = list(filter(lambda x: x[1] == self.child_selected_station_2, select_df))
            items_list = list(set(x[2] for x in items_df))
            for item in items_list:
                dataItem.addItem(item)
            self.child_selected_item_2 = dataItem.currentText()

    def child_station_change(self, device, station, dataItem, num=1):

        dataItem.clear()
        selected_device_value = device.currentText()
        selected_station_value = station.currentText()


        items_df = list(filter(lambda x: x[1] == selected_station_value and selected_device_value == x[0], self.select_df))
        items_list = list(set([x[2] for x in items_df]))
        for item in items_list:
            dataItem.addItem(item)

        if num == 1:
            self.child_selected_station_1 = selected_station_value
            self.child_selected_item_1 = dataItem.currentText()
        else:
            self.child_selected_station_2 = station.currentText()
            self.child_selected_item_2 = dataItem.currentText()

    def child_item_change(self, dataItem, num=1):
        if num ==1:
            self.child_selected_item_1 = dataItem.currentText()
        else:
            self.child_selected_item_2 = dataItem.currentText()


    def child_clean_button(self):
        radioButton = self.sender()
        if radioButton.isChecked():
            self.clear_name = radioButton.text()
            if self.clear_name == '3-sigma':
                self.custom_up_label_name.hide()
                self.custom_up_input_val.hide()
                self.custom_down_label_name.hide()
                self.custom_down_input_val.hide()
            elif self.clear_name == '箱形图':
                self.custom_up_label_name.hide()
                self.custom_up_input_val.hide()
                self.custom_down_label_name.hide()
                self.custom_down_input_val.hide()
            elif self.clear_name == '自定义阈值':
                self.custom_up_label_name.show()
                self.custom_up_input_val.show()
                self.custom_down_label_name.show()
                self.custom_down_input_val.show()
            elif self.clear_name == '不清洗':
                self.custom_up_label_name.hide()
                self.custom_up_input_val.hide()
                self.custom_down_label_name.hide()
                self.custom_down_input_val.hide()

                self.clear_name = None

    def child_fitting_button(self):
        """
        拟合方式
        :return:
        """
        radioButton = self.sender()
        if radioButton.isChecked():
            self.fitting_name = radioButton.text()

    def clean_fitting_record(self):
        """
        清空之前所有拟合操作产生的数据
        :return:
        """
        self.clear_name = None
        self.fitting_name = None
        self.fitting_had_df2 = None
        self.fitting_had_df1 = None
        self.fitting_had_select_data = None

    def fitting_ok(self):
        """
        """
        # 保存已选数据
        device_1 = self.child_selected_device_1
        device_2 = self.child_selected_device_1
        station_1 = self.child_selected_station_1
        station_2 = self.child_selected_station_2
        dataItem_1 = self.child_selected_item_1
        dataItem_2 = self.child_selected_item_2

        had_selected_data = (device_1, station_2, dataItem_1, device_2, station_2, dataItem_2)

        if self.fitting_had_df1 is not None and self.fitting_had_df2 is not None and self.fitting_had_select_data == had_selected_data:
            df_1 = self.fitting_had_df1
            df_2 = self.fitting_had_df2
        else:
            df_1 = self.data[(self.data['设备名称'] == device_1) & (self.data['测点名称'] == station_1) & (self.data['监控项名称'] == dataItem_1)]
            df_2 = self.data[(self.data['设备名称'] == device_2) & (self.data['测点名称'] == station_2) & (self.data['监控项名称'] == dataItem_2)]

            self.fitting_had_select_data = had_selected_data

        new_df_1 = None
        new_df_2 = None
        describe_1 = None
        describe_2 = None

        if self.clear_name == '3-sigma':
            new_df_1, describe_1 = self.fitting_sigma_func(df_1)
            new_df_2, describe_2 = self.fitting_sigma_func(df_2)
        elif self.clear_name == '箱形图':
            new_df_1, describe_1 = self.fitting_box_func(df_1)
            new_df_2, describe_2 = self.fitting_box_func(df_2)
        elif self.clear_name == '移动平均':
            size_win = self.child_moving_input_val.text()
            if len(size_win) == 0:
                return
            new_df_1, describe_1 = self.fitting_moving_avg(int(size_win), df_1)
            new_df_2, describe_2 = self.fitting_moving_avg(int(size_win), df_2)
        elif self.clear_name == '自定义阈值':
            up_threshold = self.custom_up_input_val.text()
            down_threshold = self.custom_down_input_val.text()
            if len(up_threshold) == 0 or len(down_threshold) == 0:
                return
            new_df_1, describe_1 = self.fitting_custom_threshold(int(up_threshold), int(down_threshold), df_1)
            new_df_2, describe_2 = self.fitting_custom_threshold(int(up_threshold), int(down_threshold), df_2)

        # new_df_1.to_excel('%s-清理后.xlsx'% self.clear_name)

        self.fitting_had_df1 = new_df_1
        self.fitting_had_df2 = new_df_2

        fitting_kpi_data = new_df_1.copy()
        fitting_kpi_data.reset_index(drop=True, inplace=True)
        kpi_data = new_df_2.copy()
        kpi_data.reset_index(drop=True, inplace=True)

        fitting_data_length = fitting_kpi_data.shape[0]
        data_length = kpi_data.shape[0]
        while fitting_data_length != data_length:
            # 先判断数据量差异
            # 若数据量差异大于2倍，对高频数据进行下采样(对fitting_kpi_data进行下采样)
            if int(fitting_data_length / data_length) >= 2:
                diff = int(fitting_data_length / data_length)
                fitting_kpi_data = fitting_kpi_data.iloc[::diff, :]
            # 若数据量差异大于2倍，对高频数据进行下采样(对kpi_data进行下采样)
            elif int(data_length / fitting_data_length) >= 2:
                diff = int(data_length / fitting_data_length)
                kpi_data = kpi_data.iloc[::diff, :]
            # 若数据量差异小于1.9倍，对较高频数据进行匹配，包括下采样
            elif fitting_data_length > data_length:
                fitting_kpi_data = fitting_kpi_data.iloc[:-(fitting_data_length - data_length)]
            elif fitting_data_length < data_length:
                kpi_data = kpi_data.iloc[:-(data_length - fitting_data_length)]
            fitting_data_length = fitting_kpi_data.shape[0]
            data_length = kpi_data.shape[0]

        date_data = pd.to_datetime(kpi_data['日期'])
        value_data = kpi_data['监控项的值']
        data_temp = pd.DataFrame(data=value_data.tolist(), index=date_data)
        date_data2 = pd.to_datetime(fitting_kpi_data['日期'])
        value_data2 = fitting_kpi_data['监控项的值']
        data_temp2 = pd.DataFrame(data=value_data2.tolist(), index=date_data2)

        if self.fitting_name == 'Ax + B':
            A1, B1 = optimize.curve_fit(self.fitting_func_1, value_data, value_data2)[0]

            self.f_1 = 'y = ' + str(round(A1, 3)) + ' * x + ' + str(round(B1, 3))
        elif self.fitting_name == 'Ax^2 + Ax + B':
            A1, B1 = optimize.curve_fit(self.fitting_func_2, value_data, value_data2)[0]
            self.f_1 = 'y = ' + str(round(A1, 3)) + ' * x^2 + ' + str(round(A1, 3)) + ' * x + ' + str(round(B1, 3))

        y_pre = A1 * np.array(value_data) + B1
        title = '%s - %s 的拟合结果'% (dataItem_1, dataItem_2)
        self.R2 = r2_score(value_data2.tolist(), y_pre)

        self.op_display_image.clear()
        if not self.op_gridlayout:
            self.op_gridlayout = QtWidgets.QGridLayout(self.op_display)
        self.op_tooBar = NavigationToolbar(self.op_display_image, self)
        self.op_gridlayout.addWidget(self.op_tooBar, 0, 0)
        self.op_gridlayout.addWidget(self.op_display_image, 1, 0)
        self.op_display_image.showImage_fitting(value_data,  dataItem_1, value_data2, dataItem_2, y_pre, title)
        self.show()

        describe_list_1 = list(describe_1.keys())
        describe_list_2 = list(describe_2.keys())
        print(describe_list_1, describe_list_2)

        labels_key = ['拟合公式', 'R^2', '清洗方法', '数据项名']
        for label in describe_list_1:
            labels_key.append(label)

        labels_key.append('数据项名')
        for label in describe_list_2:
            labels_key.append(label)

        describe_val_list_1 = describe_1.values()
        describe_val_list_2 = describe_2.values()

        labels_val = [self.f_1, self.R2, self.clear_name, dataItem_1]
        for val in describe_val_list_1:
            labels_val.append(val)

        labels_val.append(dataItem_2)
        for val in describe_val_list_2:
            labels_val.append(val)

        self.operate_data_desc_table.setRowCount(len(labels_key))
        self.operate_data_desc_table.setColumnCount(2)
        self.operate_data_desc_table.setColumnWidth(0, 70)
        self.operate_data_desc_table.setColumnWidth(1, 180)
        self.operate_data_desc_table.setHorizontalHeaderLabels(['名称', '值'])
        for i in range(len(labels_key)):
            self.operate_data_desc_table.setItem(i, 0, QTableWidgetItem(labels_key[i]))
            self.operate_data_desc_table.setItem(i, 1, QTableWidgetItem(str(labels_val[i])))

        self.close_child_window()

    def fitting_func_1(self, x, A, B):
        return A * x + B

    def fitting_func_2(self, x, A, B):
        return A * x * x + A * x + B

    def fitting_sigma_func(self, df):
        """
        拟合窗口: 3-sigma
        :return:
        """
        describe_dict = dict()
        values = df['监控项的值']
        sigma_mean = round(np.mean(values), 2)
        sigma_std = round(np.std(values), 2)
        sigma_up_threshold = round((sigma_mean + 3 * sigma_std), 2)
        sigma_down_threshold = round((sigma_mean - 3 * sigma_std), 2)
        res_df = df[(df['监控项的值'] >= sigma_down_threshold) & (df['监控项的值'] <= sigma_up_threshold)]
        describe_dict['均值'] = sigma_mean
        describe_dict['标准差'] = sigma_std
        describe_dict['上限值'] = sigma_up_threshold
        describe_dict['下限值'] = sigma_down_threshold
        return res_df, describe_dict

    def fitting_box_func(self, df):
        """
        拟合窗口： 箱形图
        :return:
        """
        describe_dict = dict()
        values = df['监控项的值']
        data_list = sorted(np.array(values))
        Q1 = round(np.quantile(data_list, 0.25), 2)
        Q3 = round(np.quantile(data_list, 0.75), 2)
        box_up_threshold = round(Q3 + 1.5 * (Q3 - Q1), 2)
        box_down_threshold = round(Q1 - 1.5 * (Q3 - Q1), 2)
        res_df = df[(df['监控项的值'] >= box_down_threshold) & (df['监控项的值'] <= box_up_threshold)]
        # describe_dict['数据清洗'] = '箱形图'
        describe_dict['上限值'] = box_up_threshold
        describe_dict['下限值'] = box_down_threshold
        return res_df, describe_dict

    def fitting_moving_avg(self, val, df):
        """
        拟合窗口：移动平均
        :return:
        """
        describe_dict = dict()
        date_list = df['日期']
        values_list = df['监控项的值']
        series = pd.Series(data=values_list.tolist(), index=date_list)
        series = series.rolling(val, min_periods=1).mean()
        df['监控项的值'] = series.tolist()
        # describe_dict['数据清洗'] = '移动平均'
        describe_dict['窗口大小'] = val
        return df, describe_dict

    def fitting_custom_threshold(self, up_threshold, down_threshold, df):
        """
        拟合窗口：自定义阈值
        :param up_threshold:
        :param down_threshold:
        :param df:
        :return:
        """
        describe_dict = dict()
        # describe_dict['数据清洗'] = '自定义阈值'
        describe_dict['上限值'] = up_threshold
        describe_dict['下限值'] = down_threshold
        res_df = df[(df['监控项的值'] >= down_threshold) & (df['监控项的值'] <= up_threshold)]
        return res_df, describe_dict

    def changing_rate_child_window(self):
        self.child_window.setWindowTitle('变化率')
        self.child_window.setFixedSize(900, 700)

        # 算法描述
        groupBox = QtWidgets.QGroupBox(self.child_window)
        groupBox.setGeometry(QtCore.QRect(15, 10, 870, 90))
        font = QtGui.QFont()
        font.setPointSize(16)
        groupBox.setFont(font)
        groupBox.setObjectName("groupBox")
        groupBox.setTitle("算法描述")
        label = QtWidgets.QLabel(groupBox)
        label.setGeometry(QtCore.QRect(20, 35, 830, 40))
        label.setObjectName("label")
        label.setText("计算一段时间内，若干点数据持续上升（下降）或变化率，变化率计算方式为一段时间内的拟合斜率。")
        font.setPointSize(14)
        label.setFont(font)

        # 数据清洗
        self.child_clean_data(self.child_window, X=15, Y=120)

        # 移动平均
        self.child_moving_average_pub(self.child_window, X=15, Y=200)

        # 操作内容
        groupBox_2 = QtWidgets.QGroupBox(self.child_window)
        groupBox_2.setGeometry(QtCore.QRect(15, 280, 870, 60))
        font = QtGui.QFont()
        font.setPointSize(16)
        groupBox_2.setFont(font)
        groupBox_2.setObjectName("groupBox_2")
        groupBox_2.setTitle("操作内容")

        label_4 = QtWidgets.QLabel(groupBox_2)
        label_4.setGeometry(QtCore.QRect(20, 20, 140, 40))
        font = QtGui.QFont()
        font.setPointSize(14)
        label_4.setFont(font)
        label_4.setObjectName("label_4")
        label_4.setText("时间窗口大小(分钟):")
        self.rate_val = QtWidgets.QLineEdit(groupBox_2)
        self.rate_val.setGeometry(QtCore.QRect(170, 26, 60, 30))
        self.rate_val.setObjectName("lineEdit")

        # 变化率
        groupBox_3 = QtWidgets.QGroupBox(self.child_window)
        groupBox_3.setGeometry(QtCore.QRect(15, 360, 870, 60))
        groupBox_3.setTitle('变化率')
        font.setPointSize(16)
        groupBox_3.setFont(font)

        fitting = QtWidgets.QRadioButton(groupBox_3)
        fitting.setGeometry(QtCore.QRect(20, 20, 100, 40))
        fitting.setText('拟合斜率')
        fitting.toggled.connect(partial(self.fitting_type_button))

        max_min = QtWidgets.QRadioButton(groupBox_3)
        max_min.setGeometry(QtCore.QRect(140, 20, 260, 40))
        max_min.setText('最大值和最小值的差值计算斜率')
        max_min.toggled.connect(partial(self.fitting_type_button))

        # 窗口确认、取消
        self.child_window_buttons(self.child_window, self.changing_rate_ok)

        self.child_window.resize(False, False)
        self.child_window.show()

    def fitting_type_button(self):
        """
        变化率方式选择
        :return:
        """
        radioButton = self.sender()
        if radioButton.isChecked():
            self.child_fitting_type_name = radioButton.text()

    def changing_rate_ok(self):
        """
        变化率-确定按钮操作
        """
        if self.df is None:
            return

        # 判断是否进行数据清洗
        df_describe = None
        if self.clear_name is not None:
            if self.clear_name == '3-sigma':
                self.child_df, df_describe = self.fitting_sigma_func(self.df)
            elif self.clear_name == '箱形图':
                self.child_df, df_describe = self.fitting_box_func(self.df)
            elif self.clear_name == '自定义阈值':
                up_threshold = self.custom_up_input_val.text()
                down_threshold = self.custom_down_input_val.text()
                self.child_df, df_describe = self.fitting_custom_threshold(float(up_threshold), float(down_threshold), self.data)

            print('数据清洗', df_describe)
            self.child_df.to_excel('清洗后数据.xls')

        if self.child_df is None:
            self.child_df = self.df.copy()

        # 判断是否进行移动平均
        if self.child_moving_avg.isChecked() and self.child_moving_input_val.text():
            moving_size = int(self.child_moving_input_val.text())
            self.child_df, df_describe = self.fitting_moving_avg(moving_size, self.child_df)

            print('移动平均', df_describe)
            self.child_df.to_excel('移动平均后.xls')

        if len(self.rate_val.text()) == 0:
            return

        val = int(self.rate_val.text())

        # 处理 x 轴日期坐标
        times_list = self.child_df['日期'].to_list()
        date_list = list(set([x[5:13] for x in times_list]))
        date_list.sort()
        date_len = len(date_list)
        if date_len > 9:
            date_range = [i for i in range(0, date_len, date_len // 9)]
            date_list = [date_list[i] for i in date_range]

        if self.child_fitting_type_name == '拟合斜率':
            changing_type = 1
            changing_rate_name = '总体拟合斜率'
        else:
            changing_type = 2
            changing_rate_name = 'Max-Min拟合斜率'

        k, curve_trend_list = self.changing_rate(self.child_df, val, changing_type)
        changing_rate_name += '(总体变化率：%s)'% k

        self.op_display_image.clear()
        if not self.op_gridlayout:
            self.op_gridlayout = QtWidgets.QGridLayout(self.op_display)
        self.op_tooBar = NavigationToolbar(self.op_display_image, self)
        self.op_gridlayout.addWidget(self.op_tooBar, 0, 0)
        self.op_gridlayout.addWidget(self.op_display_image, 1, 0)

        print(changing_rate_name, curve_trend_list)
        self.op_display_image.showImage_changing_rate(curve_trend_list, date_list, title=changing_rate_name)

        self.show()

        self.operate_data_desc_table.clear()
        self.close_child_window()

    def changing_rate(self, kpi_data, time_size, fun_type):
        """
        :param kpi_data: 进行变化率计算的数据，dataframe格式，包括“日期”和“监控项的值”
        :param time_size: 用户输入的时间框大小（点的个数）
        :param fun_type: 变化率计算方式（ 1：线性拟合斜率；2：最大值和最小值差值）
        :return: 总体变化率(float)，时间窗内的变化率(numpy.ndarray)
        """
        # 总体变化率计算
        values = kpi_data['监控项的值']
        times = pd.to_datetime(kpi_data['日期'])
        value_df = pd.DataFrame(values.values.tolist(), index=times)

        # 总体的变化率结果(单位：分钟)
        if fun_type == 1:
            expanding_seconds = (times.iloc[-1] - times.iloc[0]).seconds
            expanding_minutes = expanding_seconds / 60
            # 拟合斜率-总体变化率
            k, b = optimize.curve_fit(self.fitting_func_1, np.arange(
                kpi_data.shape[0]), values)[0]
            value_df = value_df.rolling(time_size, min_periods=5).apply(
                lambda x: self.curve_fit_fun(x) / (expanding_minutes / len(values)))

        elif fun_type == 2:
            expanding_seconds = (times[np.argmax(values)] - times[np.argmin(values)]).seconds
            expanding_minutes = expanding_seconds / 60
            # 最大值和最小值差值-总体变化率
            k = (max(values) - min(values)) / (np.argmax(values) - np.argmin(values))
            value_df = value_df.rolling(time_size, min_periods=5).apply(
                lambda x: self.min_max_fit_fun(x) / (expanding_minutes / len(values)))
        return k, value_df.values.tolist()

    def curve_fit_fun(self, values):
        """
        拟合斜率
        :param values:
        :return:
        """
        k, b = optimize.curve_fit(self.fitting_func_1, np.arange(len(values)), values)[0]
        return k

    def min_max_fit_fun(self, values):
        """
        最大值和最小值差值
        :param values:
        :return:
        """
        k = (max(values) - min(values)) / (np.argmax(values) - np.argmin(values))
        return k

    def threePhase_child_window(self):
        """
        偏差计算
        :return:
        """
        self.child_window.setWindowTitle('偏差计算')
        self.child_window.setFixedSize(900, 700)

        # 算法描述
        groupBox = QtWidgets.QGroupBox(self.child_window)
        groupBox.setGeometry(QtCore.QRect(15, 10, 870, 90))
        font = QtGui.QFont()
        font.setPointSize(16)
        groupBox.setFont(font)
        groupBox.setObjectName("groupBox")
        groupBox.setTitle("算法描述")
        label = QtWidgets.QLabel(groupBox)
        label.setGeometry(QtCore.QRect(20, 35, 830, 40))
        label.setObjectName("label")
        label.setText("计算每个数据值和平均值之间的差值。如对于三相电流或三相温度，计算每个电流或温度和平均值之间的差值。")
        font.setPointSize(12)
        label.setFont(font)

        # 数据选择
        groupBox_2 = QtWidgets.QGroupBox(self.child_window)
        groupBox_2.setGeometry(QtCore.QRect(15, 120, 870, 260))
        font = QtGui.QFont()
        font.setPointSize(16)
        groupBox_2.setFont(font)
        groupBox_2.setObjectName("groupBox_2")
        groupBox_2.setTitle("选择数据")

        font.setPointSize(14)
        device_label = QtWidgets.QLabel(groupBox_2)
        device_label.setGeometry(QtCore.QRect(20, 40, 40, 30))
        device_label.setFont(font)
        device_label.setText('设备')

        device_value = QtWidgets.QComboBox(groupBox_2)
        device_value.setGeometry(QtCore.QRect(55, 40, 230, 35))
        device_value.setObjectName('device_value')

        add_button = QtWidgets.QPushButton(groupBox_2)
        add_button.setGeometry(QtCore.QRect(20, 80, 120, 40))
        add_button.setObjectName('add_button')
        add_button.setText('添加选项')

        delete_button = QtWidgets.QPushButton(groupBox_2)
        delete_button.setGeometry(QtCore.QRect(20, 130, 120, 40))
        delete_button.setText('删除选项')

        station_label_1 = QtWidgets.QLabel(groupBox_2)
        station_label_1.setGeometry(QtCore.QRect(300, 40, 35, 30))
        station_label_1.setFont(font)
        station_label_1.setText('测点')

        station_value_1 = QtWidgets.QComboBox(groupBox_2)
        station_value_1.setGeometry(QtCore.QRect(340, 40, 230, 35))

        dataItem_label_1 = QtWidgets.QLabel(groupBox_2)
        dataItem_label_1.setGeometry(QtCore.QRect(575, 40, 45, 30))
        dataItem_label_1.setFont(font)
        dataItem_label_1.setText('数据项')

        dataItem_value_1 = QtWidgets.QComboBox(groupBox_2)
        dataItem_value_1.setGeometry(QtCore.QRect(625, 40, 230, 35))

        item_dict_1 = dict()
        item_dict_1['status'] = 1
        item_dict_1['station_label'] = station_label_1
        item_dict_1['station_value'] = station_value_1
        item_dict_1['station_selected'] = ''
        item_dict_1['dataItem_label'] = dataItem_label_1
        item_dict_1['dataItem_value'] = dataItem_value_1
        item_dict_1['dataItem_selected'] = ''

        station_label_2 = QtWidgets.QLabel(groupBox_2)
        station_label_2.setGeometry(QtCore.QRect(300, 80, 35, 30))
        station_label_2.setFont(font)
        station_label_2.setText('测点')

        station_value_2 = QtWidgets.QComboBox(groupBox_2)
        station_value_2.setGeometry(QtCore.QRect(340, 80, 230, 35))

        dataItem_label_2 = QtWidgets.QLabel(groupBox_2)
        dataItem_label_2.setGeometry(QtCore.QRect(575, 80, 45, 30))
        dataItem_label_2.setFont(font)
        dataItem_label_2.setText('数据项')

        dataItem_value_2 = QtWidgets.QComboBox(groupBox_2)
        dataItem_value_2.setGeometry(QtCore.QRect(625, 80, 230, 35))

        item_dict_2 = dict()
        item_dict_2['status'] = 1
        item_dict_2['station_label'] = station_label_2
        item_dict_2['station_value'] = station_value_2
        item_dict_2['station_selected'] = ''
        item_dict_2['dataItem_label'] = dataItem_label_2
        item_dict_2['dataItem_value'] = dataItem_value_2
        item_dict_2['dataItem_selected'] = ''

        station_label_3 = QtWidgets.QLabel(groupBox_2)
        station_label_3.setGeometry(QtCore.QRect(300, 120, 35, 30))
        station_label_3.setFont(font)
        station_label_3.setText('测点')

        station_value_3 = QtWidgets.QComboBox(groupBox_2)
        station_value_3.setGeometry(QtCore.QRect(340, 120, 230, 35))

        dataItem_label_3 = QtWidgets.QLabel(groupBox_2)
        dataItem_label_3.setGeometry(QtCore.QRect(575, 120, 45, 30))
        dataItem_label_3.setFont(font)
        dataItem_label_3.setText('数据项')

        dataItem_value_3 = QtWidgets.QComboBox(groupBox_2)
        dataItem_value_3.setGeometry(QtCore.QRect(625, 120, 230, 35))

        item_dict_3 = dict()
        item_dict_3['status'] = 1
        item_dict_3['station_label'] = station_label_3
        item_dict_3['station_value'] = station_value_3
        item_dict_3['station_selected'] = ''
        item_dict_3['dataItem_label'] = dataItem_label_3
        item_dict_3['dataItem_value'] = dataItem_value_3
        item_dict_3['dataItem_selected'] = ''

        station_label_4 = QtWidgets.QLabel(groupBox_2)
        station_label_4.setGeometry(QtCore.QRect(300, 160, 35, 30))
        station_label_4.setFont(font)
        station_label_4.setText('测点')
        station_label_4.hide()

        station_value_4 = QtWidgets.QComboBox(groupBox_2)
        station_value_4.setGeometry(QtCore.QRect(340, 160, 230, 35))
        station_value_4.hide()

        dataItem_label_4 = QtWidgets.QLabel(groupBox_2)
        dataItem_label_4.setGeometry(QtCore.QRect(575, 160, 45, 30))
        dataItem_label_4.setFont(font)
        dataItem_label_4.setText('数据项')
        dataItem_label_4.hide()

        dataItem_value_4 = QtWidgets.QComboBox(groupBox_2)
        dataItem_value_4.setGeometry(QtCore.QRect(625, 160, 230, 35))
        dataItem_value_4.hide()

        item_dict_4 = dict()
        item_dict_4['status'] = 0
        item_dict_4['station_label'] = station_label_4
        item_dict_4['station_value'] = station_value_4
        item_dict_4['station_selected'] = ''
        item_dict_4['dataItem_label'] = dataItem_label_4
        item_dict_4['dataItem_value'] = dataItem_value_4
        item_dict_4['dataItem_selected'] = ''

        station_label_5 = QtWidgets.QLabel(groupBox_2)
        station_label_5.setGeometry(QtCore.QRect(300, 200, 35, 30))
        station_label_5.setFont(font)
        station_label_5.setText('测点')
        station_label_5.hide()

        station_value_5 = QtWidgets.QComboBox(groupBox_2)
        station_value_5.setGeometry(QtCore.QRect(340, 200, 230, 35))
        station_value_5.hide()

        dataItem_label_5 = QtWidgets.QLabel(groupBox_2)
        dataItem_label_5.setGeometry(QtCore.QRect(575, 200, 45, 30))
        dataItem_label_5.setFont(font)
        dataItem_label_5.setText('数据项')
        dataItem_label_5.hide()

        dataItem_value_5 = QtWidgets.QComboBox(groupBox_2)
        dataItem_value_5.setGeometry(QtCore.QRect(625, 200, 230, 35))
        dataItem_value_5.hide()

        item_dict_5 = dict()
        item_dict_5['status'] = 0
        item_dict_5['station_label'] = station_label_5
        item_dict_5['station_value'] = station_value_5
        item_dict_5['station_selected'] = ''
        item_dict_5['dataItem_label'] = dataItem_label_5
        item_dict_5['dataItem_value'] = dataItem_value_5
        item_dict_5['dataItem_selected'] = ''

        # 将测点与数据项放组成字典并放入list中
        self.threePhase_list = [item_dict_1, item_dict_2, item_dict_3, item_dict_4, item_dict_5]

        # 添加选项
        add_button.clicked.connect(partial(self.add_dataItem, self.threePhase_list, delete_button))

        # 删除选项
        delete_button.clicked.connect(partial(self.del_dataItem, self.threePhase_list, delete_button))

        if self.data is not None:
            device_data_list = list(set(self.data['设备名称']))
            for item in device_data_list:
                device_value.addItem(item)
            self.three_device_selected_value = device_value.currentText()
            device_value.currentIndexChanged.connect(partial(self.three_device_change_fun, self.threePhase_list, device_value))

            station_data = list(filter(lambda x: x[0] == self.three_device_selected_value, self.select_df))
            station_data_list = list(set([x[1] for x in station_data]))

            for obj in self.threePhase_list:
                if obj['status'] == 1:
                    for item in station_data_list:
                        obj['station_value'].addItem(item)

                    obj['station_selected'] = obj['station_value'].currentText()
                    obj['station_value'].currentIndexChanged.connect(partial(self.three_station_change_fun, self.threePhase_list, obj['station_value']))

                    dataItem_data = list(filter(lambda x: x[0] == self.three_device_selected_value and x[1] == obj['station_selected'], self.select_df))
                    dataItem_data_list = list(set([x[2] for x in dataItem_data]))

                    for item in dataItem_data_list:
                        obj['dataItem_value'].addItem(item)

                    obj['dataItem_selected'] = obj['dataItem_value'].currentText()
                    obj['dataItem_value'].currentIndexChanged.connect(partial(self.three_dataItem_change_fun, self.threePhase_list, obj['dataItem_value']))

        # 数据清洗
        self.child_clean_data(self.child_window, 15, 400)

        # 移动平均
        self.child_moving_average_pub(self.child_window, 15, 480)

        # 操作内容
        groupBox_3 = QtWidgets.QGroupBox(self.child_window)
        groupBox_3.setGeometry(QtCore.QRect(15, 560, 870, 80))
        font = QtGui.QFont()
        font.setPointSize(16)
        groupBox_3.setFont(font)
        groupBox_3.setObjectName("groupBox_3")
        groupBox_3.setTitle("操作内容")

        # 均值
        mean_value = QtWidgets.QCheckBox(groupBox_3)
        mean_value.setGeometry(QtCore.QRect(20, 40, 100, 30))
        mean_value.setText("均值")
        mean_value.toggled.connect(partial(self.three_option_fun))

        # 百分比显示
        percentage_value = QtWidgets.QCheckBox(groupBox_3)
        percentage_value.setGeometry(QtCore.QRect(140, 40, 100, 30))
        percentage_value.setText('百分比')
        percentage_value.toggled.connect(partial(self.three_option_fun, ))

        # 展示方式
        line_value = QtWidgets.QRadioButton(groupBox_3)
        line_value.setGeometry(QtCore.QRect(260, 40, 100, 30))
        line_value.setText('折线图')
        line_value.toggled.connect(partial(self.three_display_fun,))

        scatter_value = QtWidgets.QRadioButton(groupBox_3)
        scatter_value.setGeometry(QtCore.QRect(380, 40, 100, 30))
        scatter_value.setText('散点图')
        scatter_value.toggled.connect(partial(self.three_display_fun, ))



        # 窗口确认、取消
        self.child_window_buttons(self.child_window, self.threePhase_ok)

        self.child_window.resize(False, False)
        self.child_window.show()

    def add_dataItem(self, obj_list, del_button):
        """
        偏差计算：添加选项
        :return:
        """
        if self.select_df is None:
            return

        station_data = list(filter(lambda x: x[0] == self.three_device_selected_value, self.select_df))
        station_data_list = list(set([x[1] for x in station_data]))

        for obj in obj_list:
            if obj['status'] == 0:
                obj['status'] = 1
                obj['station_label'].show()
                obj['station_value'].show()
                obj['dataItem_label'].show()
                obj['dataItem_value'].show()

                obj['station_value'].clear()
                obj['dataItem_value'].clear()
                for item in station_data_list:
                    obj['station_value'].addItem(item)
                obj['station_selected'] = obj['station_value'].currentText()
                obj['station_value'].currentIndexChanged.connect(partial(self.three_station_change_fun, obj_list, obj['station_value']))

                dataItem_data = list(filter(lambda x: x[0] == self.three_device_selected_value and x[1] == obj['station_selected'],self.select_df))
                dataItem_data_list = list(set([x[2] for x in dataItem_data]))

                for item in dataItem_data_list:
                    obj['dataItem_value'].addItem(item)

                obj['dataItem_selected'] = obj['dataItem_value'].currentText()
                obj['dataItem_value'].currentIndexChanged.connect(partial(self.three_dataItem_change_fun, self.threePhase_list, obj['dataItem_value']))

                break

        had_show_len = len(list(filter(lambda x: x['status'] == 1, self.threePhase_list)))
        # 数据选项超出两个，显示删除选项按钮
        if had_show_len >2:
            del_button.show()

    def del_dataItem(self, obj_list, del_button):
        """
        偏差计算：删除选项
        :return:
        """
        had_show_len = len(list(filter(lambda x: x['status'] == 1, self.threePhase_list)))

        if had_show_len == 5:
            self.threePhase_list[4]['status'] = 0
            self.threePhase_list[4]['station_label'].hide()
            self.threePhase_list[4]['station_value'].hide()
            self.threePhase_list[4]['dataItem_label'].hide()
            self.threePhase_list[4]['dataItem_value'].hide()
        elif had_show_len == 4:
            self.threePhase_list[3]['status'] = 0
            self.threePhase_list[3]['station_label'].hide()
            self.threePhase_list[3]['station_value'].hide()
            self.threePhase_list[3]['dataItem_label'].hide()
            self.threePhase_list[3]['dataItem_value'].hide()
        elif had_show_len == 3:
            self.threePhase_list[2]['status'] = 0
            self.threePhase_list[2]['station_label'].hide()
            self.threePhase_list[2]['station_value'].hide()
            self.threePhase_list[2]['dataItem_label'].hide()
            self.threePhase_list[2]['dataItem_value'].hide()

            # 隐藏删除选项按钮
            del_button.hide()

    def three_device_change_fun(self, obj_list, device):
        """
        设备回调
        :return:
        """
        self.three_device_selected_value = device.currentText()
        station_data = list(filter(lambda x: x[0] == self.three_device_selected_value, self.select_df))
        station_data_list = list(set([x[1] for x in station_data]))

        for obj in obj_list:
            if obj['status'] == 1:
                obj['station_value'].clear()
                for item in station_data_list:
                    obj['station_value'].addItem(item)

                obj['station_selected'] = obj['station_value'].currentText()

    def three_station_change_fun(self, obj_list, station):
        """
        测点回调
        :param obj_list:
        :param station:
        :return:
        """
        station_selected = station.currentText()
        dataItem_data = list(filter(lambda x: x[0] == self.three_device_selected_value and x[1] == station_selected, self.select_df))
        dataItem_data_list = list(set([x[2] for x in dataItem_data]))

        for obj in obj_list:
            if obj['status'] == 1 and obj['station_value'] == station:
                obj['dataItem_value'].clear()
                for item in dataItem_data_list:
                    obj['dataItem_value'].addItem(item)

                obj['station_selected'] = station_selected
                obj['dataItem_selected'] = obj['dataItem_value'].currentText()

    def three_dataItem_change_fun(self, obj_list, dataItem):
        """
        数据项回调
        :param obj_list:
        :param dataItem:
        :return:
        """
        dataItem_selected = dataItem.currentText()

        for obj in obj_list:
            if obj['status'] == 1 and obj['dataItem_value'] == dataItem:
                obj['dataItem_selected'] = dataItem.currentText()

    def three_option_fun(self):
        """
        数据操作
        :return:
        """
        checkBox = self.sender()

        box_name = checkBox.text()
        if checkBox.isChecked():
            if box_name not in self.three_had_selected_option:
                self.three_had_selected_option.append(box_name)
        else:
            index = self.three_had_selected_option.index(box_name)
            del self.three_had_selected_option[index]

    def threePhase_ok(self):
        """
        偏差计算，确认操作
        :return:
        """
        data_list = list()
        for item in self.threePhase_list:
            item_tuple = (self.three_device_selected_value, item['station_selected'], item['dataItem_selected'])
            if item['status'] == 1 and item_tuple not in data_list:
                data_list.append(item_tuple)

        item_list = list()
        for data in data_list:
            df = self.data[(self.data['设备名称'] == data[0]) & (self.data['测点名称'] == data[1]) & (self.data['监控项名称'] == data[2])]
            item_list.append(list(df['监控项的值']))

            # 导出已选数据项
            # df.to_excel('%s.xls'% data[2], index=None)

        item_len = len(item_list)

        if item_len < 2:
            return

        if item_len == 2:
            all_list = list(zip(item_list[0], item_list[1]))
        elif item_len == 3:
            all_list = list(zip(item_list[0], item_list[1], item_list[2]))
        elif item_len == 4:
            all_list = list(zip(item_list[0], item_list[1], item_list[2], item_list[3]))
        elif item_len == 5:
            all_list = list(zip(item_list[0], item_list[1], item_list[2], item_list[3], item_list[4]))

        mean_list = []
        for item in all_list:
            mean = self.get_mean(item)
            mean_list.append(mean)
        # 均值导出
        # pd.DataFrame(mean_list).to_excel('均值.xls')
        # print('均值', mean_list)
        all_deviation_list = []
        status = 1
        title = '均值'

        if '百分比' in self.three_had_selected_option:
            status = 2

        if self.three_display_type is None or self.three_display_type == '折线图':
            display = 1
        else:
            display = 2

        child_deviation_list = []
        if '偏差' in self.three_had_selected_option:
            title = title + '和偏差'

        for i in range(len(all_list)):
            dev = self.get_deviation(all_list[i], mean_list[i], status)
            all_deviation_list.append(dev)

        child_list_len = len(all_deviation_list[0])

        for i in range(child_list_len):
            child_deviation_list.append([])

        for item in all_deviation_list:
            for i in range(len(item)):
                child_deviation_list[i].append(item[i])

        # pd.DataFrame(child_deviation_list[0]).to_excel('0偏差.xls')
        # pd.DataFrame(child_deviation_list[1]).to_excel('1偏差.xls')
        # pd.DataFrame(child_deviation_list[2]).to_excel('2偏差.xls')
        legend_list = []
        for item in data_list:
            legend_list.append(item[2] + '偏差')

        self.op_display_image.clear()
        if not self.op_gridlayout:
            self.op_gridlayout = QtWidgets.QGridLayout(self.op_display)
        self.op_tooBar = NavigationToolbar(self.op_display_image, self)
        self.op_gridlayout.addWidget(self.op_tooBar, 0, 0)
        self.op_gridlayout.addWidget(self.op_display_image, 1, 0)

        # 统计描述
        statistical_desc = []
        for i in range(len(child_deviation_list)):
            desc_dict = dict()
            new_child_deviation_list = child_deviation_list[i].copy()
            new_child_deviation_list.sort()
            desc_dict['数据项名称'] = legend_list[i][0:len(legend_list[i])-2]
            desc_dict['均值'] = round(np.mean(new_child_deviation_list), 2)
            desc_dict['标准差'] = round(np.std(new_child_deviation_list), 2)
            desc_dict['最小值'] = np.min(new_child_deviation_list)
            desc_dict['最大值'] = np.max(new_child_deviation_list)
            desc_dict['上四分位数'] = np.percentile(new_child_deviation_list, (25))
            desc_dict['下四分位数'] = np.percentile(new_child_deviation_list, (75))

            statistical_desc.append(desc_dict)

        if '均值' in self.three_had_selected_option:
            legend_list.insert(0, '均值')
            if len(child_deviation_list) == 2:
                self.op_display_image.showImage_three_electric(self.data, mean_list, child_deviation_list[0], child_deviation_list[1], legend=legend_list, title=title, display=display)
            elif len(child_deviation_list) == 3:
                self.op_display_image.showImage_three_electric(self.data, mean_list, child_deviation_list[0], child_deviation_list[1], child_deviation_list[2], legend=legend_list, title=title, display=display)
            elif len(child_deviation_list) == 4:
                self.op_display_image.showImage_three_electric(self.data, mean_list, child_deviation_list[0], child_deviation_list[1], child_deviation_list[2], child_deviation_list[3], legend=legend_list, title=title, display=display)
            elif len(child_deviation_list) == 5:
                self.op_display_image.showImage_three_electric(self.data, mean_list, child_deviation_list[0], child_deviation_list[1], child_deviation_list[2], child_deviation_list[3], child_deviation_list[4], legend=legend_list, title=title, display=display)
        else:
            if len(child_deviation_list) == 2:
                self.op_display_image.showImage_three_electric(self.data, child_deviation_list[0], child_deviation_list[1], legend=legend_list, title=title, display=display)
            elif len(child_deviation_list) == 3:
                self.op_display_image.showImage_three_electric(self.data, child_deviation_list[0], child_deviation_list[1], child_deviation_list[2], legend=legend_list, title=title, display=display)
            elif len(child_deviation_list) == 4:
                self.op_display_image.showImage_three_electric(self.data, child_deviation_list[0], child_deviation_list[1], child_deviation_list[2], child_deviation_list[3], legend=legend_list, title=title, display=display)
            elif len(child_deviation_list) == 5:
                self.op_display_image.showImage_three_electric(self.data, child_deviation_list[0], child_deviation_list[1], child_deviation_list[2], child_deviation_list[3], child_deviation_list[4], legend=legend_list, title=title, display=display)
        self.show()

        labels_key_list = list()
        labels_key_list = [list(x.keys()) for x in statistical_desc]
        labels_key_list = np.array(labels_key_list).flatten()
        labels_value_list = [list(x.values()) for x in statistical_desc]
        labels_value_list = np.array(labels_value_list).flatten()
        self.operate_data_desc_table.setRowCount(len(labels_key_list))
        self.operate_data_desc_table.setColumnCount(2)
        self.operate_data_desc_table.setColumnWidth(0, 80)
        self.operate_data_desc_table.setColumnWidth(1, 220)
        self.operate_data_desc_table.setHorizontalHeaderLabels(['名称', '值'])
        for i in range(len(labels_key_list)):
            self.operate_data_desc_table.setItem(i, 0, QTableWidgetItem(labels_key_list[i]))
            self.operate_data_desc_table.setItem(i, 1, QTableWidgetItem(str(labels_value_list[i])))

        #  清除操作内容
        self.three_had_selected_option.clear()
        self.close_child_window()

    def get_mean(self, data_list):
        """
        求均值
        :param data_list:
        :return:
        """
        count = 0
        for item in data_list:
            count = count + item

        return round(count / len(data_list), 2)

    def get_deviation(self, data_list, mean, status=1):
        """
        求偏差
        :param data_list:
        :param mean:    均值
        :param status: 2 ：百分比
        :return:
        """
        deviation_list = []
        for item in data_list:
            if status == 2:
                if int(item) == 0:
                    dev = 0
                else:
                    dev = round((item - mean) / mean, 2)
            else:
                dev = round(item - mean, 2)

            deviation_list.append(dev)
        return deviation_list

    def three_display_fun(self):
        """
        展示方式
        :return:
        """
        checkBox = self.sender()
        name = checkBox.text()
        if checkBox.isChecked():
            self.three_display_type = name

    def close_child_window(self):
        """
        关闭子窗口
        :return:
        """
        # 获取子窗口所有控件，并删除
        controls = self.child_window.children()
        for item in controls:
            item.deleteLater()

        self.child_window.close()


    def child_clean_data(self, child_window, X, Y):
        """
        子窗口数据清理
        :param X: X 坐标
        :param Y: Y 坐标
        :param child_window: 子窗口对象
        :return:
        """
        # 数据清洗方式
        clean_groupBox = QtWidgets.QGroupBox(child_window)
        clean_groupBox.setGeometry(QtCore.QRect(X, Y, 870, 60))
        font = QtGui.QFont()
        font.setPointSize(16)
        clean_groupBox.setFont(font)
        clean_groupBox.setObjectName("groupBox_3")
        clean_groupBox.setTitle("数据清洗")

        self.no_clean = QtWidgets.QRadioButton(clean_groupBox)
        self.no_clean.setGeometry(QtCore.QRect(20, 20, 80, 40))
        self.no_clean.setText('不清洗')
        self.no_clean.setFont(font)
        self.no_clean.toggled.connect(partial(self.child_clean_button, ))

        self.child_sigma = QtWidgets.QRadioButton(clean_groupBox)
        self.child_sigma.setGeometry(QtCore.QRect(120, 20, 80, 40))
        self.child_sigma.setText('3-sigma')
        self.child_sigma.setFont(font)
        self.child_sigma.toggled.connect(partial(self.child_clean_button, ))

        self.child_box = QtWidgets.QRadioButton(clean_groupBox)
        self.child_box.setGeometry(QtCore.QRect(220, 20, 80, 40))
        self.child_box.setText('箱形图')
        self.child_box.setFont(font)
        self.child_box.toggled.connect(partial(self.child_clean_button, ))

        self.child_custom = QtWidgets.QRadioButton(clean_groupBox)
        self.child_custom.setGeometry(QtCore.QRect(320, 20, 120, 40))
        self.child_custom.setText('自定义阈值')
        self.child_custom.setFont(font)
        self.child_custom.toggled.connect(partial(self.child_clean_button, ))

        font.setPointSize(14)
        # 自定义阈值输入
        self.custom_up_label_name = QtWidgets.QLabel(clean_groupBox)
        self.custom_up_label_name.setGeometry(QtCore.QRect(450, 20, 60, 40))
        self.custom_up_label_name.setFont(font)
        self.custom_up_label_name.setText('上限值')
        self.custom_up_label_name.hide()

        self.custom_up_input_val = QtWidgets.QLineEdit(clean_groupBox)
        self.custom_up_input_val.setGeometry(QtCore.QRect(500, 25, 60, 30))
        self.custom_up_input_val.setFont(font)
        self.custom_up_input_val.setText("")
        self.custom_up_input_val.hide()

        self.custom_down_label_name = QtWidgets.QLabel(clean_groupBox)
        self.custom_down_label_name.setGeometry(QtCore.QRect(580, 20, 90, 40))
        self.custom_down_label_name.setFont(font)
        self.custom_down_label_name.setText('下限值')
        self.custom_down_label_name.hide()

        self.custom_down_input_val = QtWidgets.QLineEdit(clean_groupBox)
        self.custom_down_input_val.setGeometry(QtCore.QRect(640, 25, 60, 30))
        self.custom_down_input_val.setFont(font)
        self.custom_down_input_val.setText("")
        self.custom_down_input_val.hide()

        # 判断之前是否操作
        if self.clear_name == '3-sigma':
            self.child_sigma.setChecked(True)
        elif self.clear_name == '箱形图':
            self.child_box.setChecked(True)
        elif self.clear_name == '自定义阈值':
            self.child_custom.setChecked(True)
            self.custom_up_label_name.show()
            self.custom_up_input_val.show()
            self.custom_down_label_name.show()
            self.custom_down_input_val.show()
        elif self.clear_name == '不清洗':
            self.no_clean.setChecked(True)

    def child_moving_average_pub(self, child_window, X, Y):
        """
        添加移动平均
        :return:
        """
        # 数据清洗方式
        moving_groupBox = QtWidgets.QGroupBox(child_window)
        moving_groupBox.setGeometry(QtCore.QRect(X, Y, 870, 60))
        font = QtGui.QFont()
        font.setPointSize(16)
        moving_groupBox.setFont(font)
        moving_groupBox.setObjectName("moving_groupBox")
        moving_groupBox.setTitle("移动平均")

        self.child_moving_avg = QtWidgets.QCheckBox(moving_groupBox)
        self.child_moving_avg.setGeometry(QtCore.QRect(20, 20, 100, 40))
        self.child_moving_avg.setText('移动平均')
        self.child_moving_avg.setFont(font)

        font.setPointSize(14)
        moving_label_name = QtWidgets.QLabel(moving_groupBox)
        moving_label_name.setGeometry(QtCore.QRect(140, 20, 100, 40))
        moving_label_name.setFont(font)
        moving_label_name.setText('输入窗口大小:')

        self.child_moving_input_val = QtWidgets.QLineEdit(moving_groupBox)
        self.child_moving_input_val.setGeometry(QtCore.QRect(260, 26, 60, 30))
        self.child_moving_input_val.setFont(font)
        self.child_moving_input_val.setText("")

    def child_window_buttons(self, child_window, call_func, X=170, Y=650):
        """
        子窗口中按钮， 取消、确定、清楚
        :param X: x轴
        :param Y: y轴
        :param child_window: 子窗口对象
        :param call_func: 确认按钮调用方法
        :return:
        """
        font = QtGui.QFont()
        # 窗口确认、取消
        font.setPointSize(16)
        cancel = QtWidgets.QPushButton(child_window)
        cancel.setGeometry(QtCore.QRect(X, Y, 100, 40))
        cancel.setFont(font)
        cancel.setObjectName("cancel")
        cancel.setText("取消")
        cancel.clicked.connect(self.close_child_window)

        sure_ok = QtWidgets.QPushButton(child_window)
        sure_ok.setGeometry(QtCore.QRect(X+150, Y, 100, 40))
        sure_ok.setFont(font)
        sure_ok.setObjectName("sure_ok")
        sure_ok.setText("确定")

        clean_cache = QtWidgets.QPushButton(child_window)
        clean_cache.setGeometry(QtCore.QRect(X+300, Y, 100, 40))
        clean_cache.setFont(font)
        clean_cache.setObjectName("clean_cache")
        clean_cache.setText("清空")
        clean_cache.clicked.connect(self.clean_fitting_record)

        sure_ok.clicked.connect(partial(call_func, ))

    def curve_display_type(self, X=15, Y=200):
        """
        曲线展示方式
        :param X:
        :param Y:
        :return:
        """
        # 曲线展示方式
        curve_groupBox = QtWidgets.QGroupBox(self.child_window)
        curve_groupBox.setGeometry(QtCore.QRect(X, Y, 570, 60))
        font = QtGui.QFont()
        font.setPointSize(16)
        curve_groupBox.setFont(font)
        curve_groupBox.setTitle("曲线展示方式")

        self.line = QtWidgets.QRadioButton(curve_groupBox)
        self.line.setGeometry(QtCore.QRect(20, 20, 80, 40))
        self.line.setText('折线图')
        self.line.setFont(font)
        self.line.toggled.connect(partial(self.display_selected_func, ))
        self.line.setChecked(True)
        self.curve_display_name = self.line.text()

        self.scatter = QtWidgets.QRadioButton(curve_groupBox)
        self.scatter.setGeometry(QtCore.QRect(120, 20, 80, 40))
        self.scatter.setText('散点图')
        self.scatter.setFont(font)
        self.scatter.toggled.connect(partial(self.display_selected_func, ))

        # 判断之前是否操作
        if self.curve_display_name == '折线图':
            self.line.setChecked(True)
        elif self.curve_display_name == '散点图':
            self.scatter.setChecked(True)

    def display_selected_func(self):
        """

        :return:
        """
        radioButton = self.sender()
        if radioButton.isChecked():
            self.curve_display_name = radioButton.text()

class Child(QWidget):
    def __init__(self):
        super().__init__()


class figure_original(FigureCanvas):
    def __init__(self):
        self.fig = Figure()
        FigureCanvas.__init__(self, self.fig)
        self.myAxes = self.fig.add_subplot(111)

    def showImage_original(self, df, title=None, display='scatter'):
        self.myAxes.cla()
        if df.empty:
            return
        new_dict = df.describe().to_dict()
        mean = new_dict[0]['mean']
        upper_quartile = new_dict[0]['75%']
        lower_quartile = new_dict[0]['25%']
        if display == 'scatter':
            self.myAxes.plot(df, '.')
        else:
            self.myAxes.plot(df)
        self.myAxes.axhline(mean, linestyle='-.', color='red')
        self.myAxes.axhline(upper_quartile, linestyle='--', color='orange')
        self.myAxes.axhline(lower_quartile, linestyle='--', color='green')
        self.myAxes.legend(['数据项', '均值', '上四分位数', '下四分位数'], loc='upper right')
        self.myAxes.set_xlabel('时间')
        self.myAxes.grid()
        self.myAxes.set_title(title)
        self.fig.canvas.draw_idle()

    def showImage_fitting(self, x, label1, y, label2, y_pre, title=None):
        self.myAxes.cla()
        self.myAxes.plot(x, y, '.', ms=2)
        self.myAxes.plot(x, y_pre, '*', color='orange')
        self.myAxes.plot(x, y_pre, color='orange')
        self.myAxes.set_xlabel(label1)
        self.myAxes.set_ylabel(label2)
        self.myAxes.legend(["拟合前", "拟合后"])
        self.myAxes.set_title(title)
        self.myAxes.grid()
        self.fig.canvas.draw_idle()

    def showImage_original_two(self, df1, label1, df2, label2, title=None):
        self.myAxes.cla()
        self.myAxes.plot(df1, '.', ms=2)
        self.myAxes.plot(df2, '.', ms=2)
        self.myAxes.legend([label1, label2])
        self.myAxes.set_xlabel('时间')
        self.myAxes.grid()
        self.myAxes.set_title(title)
        self.fig.canvas.draw_idle()

    def showImage_original_two_abnormal(self, df1, label1, df2, label2, threshold_down, threshold_up, title=None):
        self.myAxes.cla()
        self.myAxes.plot(df1, '.', ms=2)
        self.myAxes.plot(df2, '.', ms=2)
        self.myAxes.axhline(threshold_up, linestyle='--', color='red')
        self.myAxes.axhline(threshold_down, linestyle='--', color='red')
        self.myAxes.text(df1.index[0], threshold_up, '上限')
        self.myAxes.text(df1.index[0], threshold_down, '下限')
        self.myAxes.legend([label1, label2], loc='upper right')
        self.myAxes.set_xlabel('时间')
        self.myAxes.grid()
        self.myAxes.set_title(title)
        self.fig.canvas.draw_idle()

    def showImage_abnormal(self, df, threshold_down, threshold_up, title=None):
        self.myAxes.cla()
        self.myAxes.plot(df, '.', ms=2)
        self.myAxes.axhline(threshold_up, linestyle='--', color='red')
        self.myAxes.axhline(threshold_down, linestyle='--', color='red')
        self.myAxes.text(df.index[0], threshold_up, '上限')
        self.myAxes.text(df.index[0], threshold_down, '下限')
        self.myAxes.set_xlabel('时间')
        self.myAxes.grid()
        self.myAxes.set_title(title)
        self.fig.canvas.draw_idle()

    def showImage_crossing_rate(self, kpi_data, title=None):
        date_data = pd.to_datetime(kpi_data['日期'])
        self.myAxes.cla()
        data_temp = pd.DataFrame(data=kpi_data['差分过零率'].tolist(), index=date_data)
        self.myAxes.plot(data_temp, '.', ms=2)
        self.myAxes.set_xlabel('时间')
        self.myAxes.grid()
        self.myAxes.set_title(title)
        self.fig.canvas.draw_idle()

    def showImage_analysis(self, mean_df, max_df, min_df, display=1, title=None):
        """
        统计分析-绘图
        :param display: 1: 折线图， 2：散点图
        :param mean_df: 均值
        :param max_df:  最大值
        :param min_df:  最小值
        :param title:   标题
        """
        self.myAxes.cla()
        if display == 1:
            self.myAxes.plot(mean_df)
            self.myAxes.plot(max_df)
            self.myAxes.plot(min_df)
        else:
            self.myAxes.plot(mean_df, '.', ms=2)
            self.myAxes.plot(max_df, '.', ms=2)
            self.myAxes.plot(min_df, '.', ms=2)
        self.myAxes.legend(['均值', 'Max', 'Min'], loc='upper right')
        self.myAxes.set_xlabel('时间')
        self.myAxes.grid()
        self.myAxes.set_title(title)
        self.fig.canvas.draw_idle()

    def showImage_changing_rate(self, kpi_data, times_list, title=None):
        self.myAxes.cla()
        self.myAxes.plot(kpi_data)
        self.myAxes.set_xlabel('时间')
        self.myAxes.grid()
        self.myAxes.set_title(title)
        times_list.sort()
        # 第一个元素会丢失，具体原因未知， 暂时添加 0
        times_list.insert(0, 1)
        plt.setp(self.myAxes.set_xticklabels(times_list, rotation=20, fontsize=9))
        self.fig.canvas.draw_idle()

    def showImage_three_electric(self, kpi_data, mean=None, A=None, B=None, C=None, D=None, E=None, legend=None, title=None, display=1):
        # date_data = pd.to_datetime(kpi_data['日期'])
        self.myAxes.cla()
        if display == 1:
            if mean is not None:
                self.myAxes.plot(mean)
            if A is not None:
                self.myAxes.plot(A)
            if B is not None:
                self.myAxes.plot(B)
            if C is not None:
                self.myAxes.plot(C)
            if D is not None:
                self.myAxes.plot(D)
            if E is not None:
                self.myAxes.plot(E)
        else:
            if mean is not None:
                self.myAxes.plot(mean, '.', ms=2)
            if A is not None:
                self.myAxes.plot(A, '.', ms=2)
            if B is not None:
                self.myAxes.plot(B, '.', ms=2)
            if C is not None:
                self.myAxes.plot(C, '.', ms=2)
            if D is not None:
                self.myAxes.plot(D, '.', ms=2)
            if E is not None:
                self.myAxes.plot(E, '.', ms=2)

        self.myAxes.set_xlabel('时间')
        self.myAxes.grid()
        self.myAxes.legend(legend)
        self.myAxes.set_title(title)
        x_label = list(kpi_data['日期'])
        x_label= np.unique(np.array(x_label)).tolist()
        x_label = [x[0:10] for x in x_label]
        x_label = list(set(x_label))
        x_label.sort()
        # 第一个元素会丢失，具体原因未知， 暂时添加 0
        x_label.insert(0, 1)
        plt.setp(self.myAxes.set_xticklabels(x_label))
        self.fig.canvas.draw_idle()

    def showImage_alarm(self, kpi_data, delay_threshold, rolling_count_index, title=None):
        kpi_data.reset_index(drop=True, inplace=True)
        values = kpi_data['监控项的值']
        date_data = pd.to_datetime(kpi_data['日期'])
        data_temp = pd.DataFrame(data=values.tolist(), index=date_data)
        self.myAxes.cla()
        self.myAxes.plot(data_temp)
        self.myAxes.axhline(delay_threshold, linestyle='--', color='red')
        if rolling_count_index[0] == 0:
            self.myAxes.text(date_data[0], delay_threshold, '阈值   报警个数：' + str(len(rolling_count_index)-1))
        else:
            self.myAxes.text(date_data[0], delay_threshold, '阈值   报警个数：' + str(len(rolling_count_index)))
        self.myAxes.set_xlabel('时间')
        self.myAxes.set_title(title)
        if rolling_count_index[0] != 0:
            try:
                for i in rolling_count_index:
                    self.myAxes.axvline(i, linestyle='--', color='orange')
            except:
                pass
        self.fig.canvas.draw_idle()

    def showImage(self, df, title=None):
        self.myAxes.cla()
        self.myAxes.plot(df)
        self.myAxes.set_xlabel('时间')
        self.myAxes.set_title(title)
        self.fig.canvas.draw_idle()

    def clear(self):
        self.myAxes.cla()
        self.myAxes.grid()
        self.fig.canvas.draw_idle()



import sys
from PyQt5.QtWidgets import QApplication, QMainWindow, QTableWidgetItem, QAction, QFileDialog, QInputDialog

class Application(QMainWindow, Ui_MainWindow):
    def __init__(self):
        super(Application, self).__init__()
        self.setupUi(self)
        self.setWindowTitle("规则模型可视化工具")



if __name__ == '__main__':
    app = QApplication(sys.argv)
    MainWindow = QMainWindow()
    window = Ui_MainWindow()
    # window.setupUi(MainWindow)
    view = Application()
    view.show()
    sys.exit(app.exec_())